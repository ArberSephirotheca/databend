statement query T
explain select * from numbers(1) t, numbers(2) t1 where t.number = t1.number;

----
Exchange(Merge)
└── HashJoin: INNER
    ├── build keys: [t1.number (#1)]
    ├── probe keys: [t.number (#0)]
    ├── other filters: []
    ├── Exchange(Hash)
    │   ├── Exchange(Hash): keys: [t.number (#0)]
    │   └── PhysicalScan
    │       ├── table: default.system.numbers
    │       ├── filters: []
    │       ├── order by: []
    │       └── limit: NONE
    └── Exchange(Hash)
        ├── Exchange(Hash): keys: [t1.number (#1)]
        └── PhysicalScan
            ├── table: default.system.numbers
            ├── filters: []
            ├── order by: []
            └── limit: NONE

statement query T
explain select * from numbers(1) t, numbers(2) t1, numbers(3) t2 where t.number = t1.number and t.number = t2.number;

----
Exchange(Merge)
└── HashJoin: INNER
    ├── build keys: [t2.number (#2)]
    ├── probe keys: [t.number (#0)]
    ├── other filters: []
    ├── HashJoin: INNER
    │   ├── build keys: [t1.number (#1)]
    │   ├── probe keys: [t.number (#0)]
    │   ├── other filters: []
    │   ├── Exchange(Hash)
    │   │   ├── Exchange(Hash): keys: [t.number (#0)]
    │   │   └── PhysicalScan
    │   │       ├── table: default.system.numbers
    │   │       ├── filters: []
    │   │       ├── order by: []
    │   │       └── limit: NONE
    │   └── Exchange(Hash)
    │       ├── Exchange(Hash): keys: [t1.number (#1)]
    │       └── PhysicalScan
    │           ├── table: default.system.numbers
    │           ├── filters: []
    │           ├── order by: []
    │           └── limit: NONE
    └── Exchange(Hash)
        ├── Exchange(Hash): keys: [t2.number (#2)]
        └── PhysicalScan
            ├── table: default.system.numbers
            ├── filters: []
            ├── order by: []
            └── limit: NONE

statement query T
explain select * from (select number as a, number+1 as b from numbers(1)) t, numbers(2) t1, numbers(3) t2 where a = t1.number and b = t2.number;

----
Exchange(Merge)
└── HashJoin: INNER
    ├── build keys: [t2.number (#4)]
    ├── probe keys: [t.b (#1)]
    ├── other filters: []
    ├── Exchange(Hash)
    │   ├── Exchange(Hash): keys: [t.b (#1)]
    │   └── HashJoin: INNER
    │       ├── build keys: [t1.number (#3)]
    │       ├── probe keys: [t.a (#0)]
    │       ├── other filters: []
    │       ├── Exchange(Hash)
    │       │   ├── Exchange(Hash): keys: [t.a (#0)]
    │       │   └── EvalScalar
    │       │       ├── scalars: [+(numbers.number (#0), 1)]
    │       │       └── PhysicalScan
    │       │           ├── table: default.system.numbers
    │       │           ├── filters: []
    │       │           ├── order by: []
    │       │           └── limit: NONE
    │       └── Exchange(Hash)
    │           ├── Exchange(Hash): keys: [t1.number (#3)]
    │           └── PhysicalScan
    │               ├── table: default.system.numbers
    │               ├── filters: []
    │               ├── order by: []
    │               └── limit: NONE
    └── Exchange(Hash)
        ├── Exchange(Hash): keys: [t2.number (#4)]
        └── PhysicalScan
            ├── table: default.system.numbers
            ├── filters: []
            ├── order by: []
            └── limit: NONE

statement query T
explain select * from (select sum(number) as number from numbers(1) group by number) t, numbers(2) t1 where t.number = t1.number;

----
Exchange(Merge)
└── HashJoin: INNER
    ├── build keys: [t1.number (#4)]
    ├── probe keys: [t.number (#1)]
    ├── other filters: []
    ├── Exchange(Hash)
    │   ├── Exchange(Hash): keys: [t.number (#1)]
    │   └── Project
    │       ├── projections: [number (#1)]
    │       └── EvalScalar
    │           ├── scalars: [sum(number) (#3)]
    │           └── Aggregate(Final)
    │               ├── group items: [numbers.number (#0)]
    │               ├── aggregate functions: [sum(number)]
    │               └── Aggregate(Partial)
    │                   ├── group items: [numbers.number (#0)]
    │                   ├── aggregate functions: [sum(number)]
    │                   └── Exchange(Hash)
    │                       ├── Exchange(Hash): keys: [numbers.number (#0)]
    │                       └── PhysicalScan
    │                           ├── table: default.system.numbers
    │                           ├── filters: []
    │                           ├── order by: []
    │                           └── limit: NONE
    └── Exchange(Hash)
        ├── Exchange(Hash): keys: [t1.number (#4)]
        └── PhysicalScan
            ├── table: default.system.numbers
            ├── filters: []
            ├── order by: []
            └── limit: NONE

