statement ok
drop table if exists t1 all;

statement ok
drop table if exists t2 all;

statement ok
create table t1(a int, b int);

statement ok
create table t2(a int, b int);

statement query T
explain select t1.a from t1 where a > 0;

----
Exchange(Merge)
└── Project
    ├── projections: [a (#0)]
    └── Filter
        ├── filters: [t1.a (#0) > 0]
        └── PhysicalScan
            ├── table: default.default.t1
            ├── filters: [t1.a (#0) > 0]
            ├── order by: []
            └── limit: NONE

statement query T
explain select * from t1, t2 where (t1.a = t2.a and t1.a > 3) or (t1.a = t2.a and t2.a > 5 and t1.a > 1);

----
Exchange(Merge)
└── Filter
    ├── filters: [(t1.a (#0) > 3) OR ((t2.a (#2) > 5) AND (t1.a (#0) > 1))]
    └── HashJoin: INNER
        ├── build keys: [t2.a (#2)]
        ├── probe keys: [t1.a (#0)]
        ├── other filters: []
        ├── Exchange(Hash)
        │   ├── Exchange(Hash): keys: [t1.a (#0)]
        │   └── PhysicalScan
        │       ├── table: default.default.t1
        │       ├── filters: []
        │       ├── order by: []
        │       └── limit: NONE
        └── Exchange(Hash)
            ├── Exchange(Hash): keys: [t2.a (#2)]
            └── PhysicalScan
                ├── table: default.default.t2
                ├── filters: []
                ├── order by: []
                └── limit: NONE

statement query T
explain select * from t1, t2 where (t1.a = t2.a and t1.a > 3) or (t1.a = t2.a);

----
Exchange(Merge)
└── HashJoin: INNER
    ├── build keys: [t2.a (#2)]
    ├── probe keys: [t1.a (#0)]
    ├── other filters: []
    ├── Exchange(Hash)
    │   ├── Exchange(Hash): keys: [t1.a (#0)]
    │   └── PhysicalScan
    │       ├── table: default.default.t1
    │       ├── filters: []
    │       ├── order by: []
    │       └── limit: NONE
    └── Exchange(Hash)
        ├── Exchange(Hash): keys: [t2.a (#2)]
        └── PhysicalScan
            ├── table: default.default.t2
            ├── filters: []
            ├── order by: []
            └── limit: NONE

statement query T
explain raw select * from t1, t2 where (t1.a = t2.a and t1.a > 3) or (t1.a = t2.a);

----
Project
├── projections: [a (#0),b (#1),a (#2),b (#3)]
└── EvalScalar
    ├── scalars: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
    └── Filter
        ├── filters: [((t1.a (#0) = t2.a (#2)) AND (t1.a (#0) > 3)) OR (t1.a (#0) = t2.a (#2))]
        └── LogicalJoin: CROSS
            ├── equi conditions: []
            ├── other conditions: []
            ├── LogicalGet
            │   ├── table: default.default.t1
            │   ├── filters: []
            │   ├── order by: []
            │   └── limit: NONE
            └── LogicalGet
                ├── table: default.default.t2
                ├── filters: []
                ├── order by: []
                └── limit: NONE

statement query T
explain raw select * from t1 inner join t2 on t1.a = t2.a and t1.b = t2.b and t1.a > 2;

----
Project
├── projections: [a (#0),b (#1),a (#2),b (#3)]
└── EvalScalar
    ├── scalars: [t1.a (#0), t1.b (#1), t2.a (#2), t2.b (#3)]
    └── LogicalJoin: INNER
        ├── equi conditions: [(t1.a (#0) = t2.a (#2)) AND (t1.b (#1) = t2.b (#3))]
        ├── other conditions: [t1.a (#0) > 2]
        ├── LogicalGet
        │   ├── table: default.default.t1
        │   ├── filters: []
        │   ├── order by: []
        │   └── limit: NONE
        └── LogicalGet
            ├── table: default.default.t2
            ├── filters: []
            ├── order by: []
            └── limit: NONE

statement ok
drop table t1;

statement ok
drop table t2;
