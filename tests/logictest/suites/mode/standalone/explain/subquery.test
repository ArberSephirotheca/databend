statement query T
explain select t.number from numbers(1) as t, numbers(1) as t1 where t.number = (select count(*) from numbers(1) as t2, numbers(1) as t3 where t.number = t2.number);

----
Project
├── projections: [number (#0)]
└── Filter
    ├── filters: [t.number (#0) = CAST(if(is_not_null(scalar_subquery_4 (#4)), scalar_subquery_4 (#4), 0) AS BIGINT UNSIGNED)]
    └── HashJoin: SINGLE
        ├── build keys: [subquery_6 (#6)]
        ├── probe keys: [subquery_0 (#0)]
        ├── other filters: []
        ├── CrossJoin
        │   ├── build keys: []
        │   ├── probe keys: []
        │   ├── other filters: []
        │   ├── PhysicalScan
        │   │   ├── table: default.system.numbers
        │   │   ├── filters: []
        │   │   ├── order by: []
        │   │   └── limit: NONE
        │   └── PhysicalScan
        │       ├── table: default.system.numbers
        │       ├── filters: []
        │       ├── order by: []
        │       └── limit: NONE
        └── Project
            ├── projections: [COUNT(*) (#4),number (#6)]
            └── EvalScalar
                ├── scalars: [COUNT(*) (#5)]
                └── Aggregate(Final)
                    ├── group items: [subquery_6 (#6)]
                    ├── aggregate functions: [COUNT(*)]
                    └── Aggregate(Partial)
                        ├── group items: [subquery_6 (#6)]
                        ├── aggregate functions: [COUNT(*)]
                        └── HashJoin: INNER
                            ├── build keys: [t2.number (#2)]
                            ├── probe keys: [subquery_6 (#6)]
                            ├── other filters: []
                            ├── PhysicalScan
                            │   ├── table: default.system.numbers
                            │   ├── filters: []
                            │   ├── order by: []
                            │   └── limit: NONE
                            └── CrossJoin
                                ├── build keys: []
                                ├── probe keys: []
                                ├── other filters: []
                                ├── PhysicalScan
                                │   ├── table: default.system.numbers
                                │   ├── filters: []
                                │   ├── order by: []
                                │   └── limit: NONE
                                └── PhysicalScan
                                    ├── table: default.system.numbers
                                    ├── filters: []
                                    ├── order by: []
                                    └── limit: NONE

statement query T
explain select t.number from numbers(1) as t where exists (select t1.number from numbers(1) as t1 where t.number = t1.number) or t.number > 1;

----
Project
├── projections: [number (#0)]
└── Filter
    ├── filters: [(3 (#3)) OR (t.number (#0) > 1)]
    └── HashJoin: MARK
        ├── build keys: [subquery_0 (#0)]
        ├── probe keys: [subquery_2 (#2)]
        ├── other filters: []
        ├── HashJoin: INNER
        │   ├── build keys: [t1.number (#1)]
        │   ├── probe keys: [subquery_2 (#2)]
        │   ├── other filters: []
        │   ├── PhysicalScan
        │   │   ├── table: default.system.numbers
        │   │   ├── filters: []
        │   │   ├── order by: []
        │   │   └── limit: NONE
        │   └── PhysicalScan
        │       ├── table: default.system.numbers
        │       ├── filters: []
        │       ├── order by: []
        │       └── limit: NONE
        └── PhysicalScan
            ├── table: default.system.numbers
            ├── filters: []
            ├── order by: []
            └── limit: NONE

statement query T
explain select t.number from numbers(1) as t where exists (select * from numbers(1) where number = 0);

----
Project
├── projections: [number (#0)]
└── CrossJoin
    ├── build keys: []
    ├── probe keys: []
    ├── other filters: []
    ├── Project
    │   ├── projections: [subquery (#3)]
    │   └── Filter
    │       ├── filters: [subquery_3 (#3)]
    │       └── EvalScalar
    │           ├── scalars: [count(*) (#2) = 1]
    │           └── Aggregate(Final)
    │               ├── group items: []
    │               ├── aggregate functions: [count(*)]
    │               └── Aggregate(Partial)
    │                   ├── group items: []
    │                   ├── aggregate functions: [count(*)]
    │                   └── Limit
    │                       ├── limit: [1]
    │                       ├── offset: [0]
    │                       └── Filter
    │                           ├── filters: [numbers.number (#1) = 0]
    │                           └── PhysicalScan
    │                               ├── table: default.system.numbers
    │                               ├── filters: [numbers.number (#1) = 0]
    │                               ├── order by: []
    │                               └── limit: NONE
    └── PhysicalScan
        ├── table: default.system.numbers
        ├── filters: []
        ├── order by: []
        └── limit: NONE

statement query T
explain select t.number from numbers(1) as t where number = (select * from numbers(1) where number = 0);

----
Project
├── projections: [number (#0)]
└── Filter
    ├── filters: [t.number (#0) = scalar_subquery_1 (#1)]
    └── HashJoin: SINGLE
        ├── build keys: []
        ├── probe keys: []
        ├── other filters: []
        ├── PhysicalScan
        │   ├── table: default.system.numbers
        │   ├── filters: []
        │   ├── order by: []
        │   └── limit: NONE
        └── Filter
            ├── filters: [numbers.number (#1) = 0]
            └── PhysicalScan
                ├── table: default.system.numbers
                ├── filters: [numbers.number (#1) = 0]
                ├── order by: []
                └── limit: NONE

statement query T
explain select t.number from numbers(1) as t where exists (select * from numbers(1) where number = t.number);

----
Project
├── projections: [number (#0)]
└── HashJoin: SEMI
    ├── build keys: [numbers.number (#1)]
    ├── probe keys: [t.number (#0)]
    ├── other filters: []
    ├── PhysicalScan
    │   ├── table: default.system.numbers
    │   ├── filters: []
    │   ├── order by: []
    │   └── limit: NONE
    └── PhysicalScan
        ├── table: default.system.numbers
        ├── filters: []
        ├── order by: []
        └── limit: NONE

statement query T
explain select t.number from numbers(1) as t where not exists (select * from numbers(1) where number = t.number);

----
Project
├── projections: [number (#0)]
└── Filter
    ├── filters: [not(3 (#3))]
    └── HashJoin: MARK
        ├── build keys: [subquery_0 (#0)]
        ├── probe keys: [subquery_2 (#2)]
        ├── other filters: []
        ├── HashJoin: INNER
        │   ├── build keys: [numbers.number (#1)]
        │   ├── probe keys: [subquery_2 (#2)]
        │   ├── other filters: []
        │   ├── PhysicalScan
        │   │   ├── table: default.system.numbers
        │   │   ├── filters: []
        │   │   ├── order by: []
        │   │   └── limit: NONE
        │   └── PhysicalScan
        │       ├── table: default.system.numbers
        │       ├── filters: []
        │       ├── order by: []
        │       └── limit: NONE
        └── PhysicalScan
            ├── table: default.system.numbers
            ├── filters: []
            ├── order by: []
            └── limit: NONE

statement query T
explain select * from numbers(1) as t where exists (select number as a from numbers(1) where number = t.number);

----
Project
├── projections: [number (#0)]
└── HashJoin: SEMI
    ├── build keys: [numbers.number (#1)]
    ├── probe keys: [t.number (#0)]
    ├── other filters: []
    ├── PhysicalScan
    │   ├── table: default.system.numbers
    │   ├── filters: []
    │   ├── order by: []
    │   └── limit: NONE
    └── PhysicalScan
        ├── table: default.system.numbers
        ├── filters: []
        ├── order by: []
        └── limit: NONE

statement query T
explain select t.number from numbers(1) as t where exists (select * from numbers(1) where number = t.number and number = 0 and t.number < 10);

----
Project
├── projections: [number (#0)]
└── HashJoin: SEMI
    ├── build keys: [numbers.number (#1)]
    ├── probe keys: [t.number (#0)]
    ├── other filters: []
    ├── Filter
    │   ├── filters: [t.number (#0) < 10]
    │   └── PhysicalScan
    │       ├── table: default.system.numbers
    │       ├── filters: [t.number (#0) < 10]
    │       ├── order by: []
    │       └── limit: NONE
    └── Filter
        ├── filters: [numbers.number (#1) = 0]
        └── PhysicalScan
            ├── table: default.system.numbers
            ├── filters: [numbers.number (#1) = 0]
            ├── order by: []
            └── limit: NONE

statement query T
explain select t.number from numbers(1) as t where exists (select * from numbers(1) where number = t.number and t.number < number);

----
Project
├── projections: [number (#0)]
└── HashJoin: SEMI
    ├── build keys: [numbers.number (#1)]
    ├── probe keys: [t.number (#0)]
    ├── other filters: [t.number (#0) < numbers.number (#1)]
    ├── PhysicalScan
    │   ├── table: default.system.numbers
    │   ├── filters: []
    │   ├── order by: []
    │   └── limit: NONE
    └── PhysicalScan
        ├── table: default.system.numbers
        ├── filters: []
        ├── order by: []
        └── limit: NONE

statement query T
explain select t.number from numbers(1) as t where exists (select number as a, number as b, number as c from numbers(1) where number = t.number);

----
Project
├── projections: [number (#0)]
└── HashJoin: SEMI
    ├── build keys: [numbers.number (#1)]
    ├── probe keys: [t.number (#0)]
    ├── other filters: []
    ├── PhysicalScan
    │   ├── table: default.system.numbers
    │   ├── filters: []
    │   ├── order by: []
    │   └── limit: NONE
    └── PhysicalScan
        ├── table: default.system.numbers
        ├── filters: []
        ├── order by: []
        └── limit: NONE

statement query T
explain select t.number from numbers(1) as t, numbers(1) as t1 where (select count(*) = 1 from numbers(1) where t.number = number) and t.number = t1.number;

----
Project
├── projections: [number (#0)]
└── Filter
    ├── filters: [CAST(if(is_not_null(scalar_subquery_3 (#3)), scalar_subquery_3 (#3), 0) AS BIGINT UNSIGNED)]
    └── HashJoin: SINGLE
        ├── build keys: [subquery_5 (#5)]
        ├── probe keys: [subquery_0 (#0)]
        ├── other filters: []
        ├── HashJoin: INNER
        │   ├── build keys: [t1.number (#1)]
        │   ├── probe keys: [t.number (#0)]
        │   ├── other filters: []
        │   ├── PhysicalScan
        │   │   ├── table: default.system.numbers
        │   │   ├── filters: []
        │   │   ├── order by: []
        │   │   └── limit: NONE
        │   └── PhysicalScan
        │       ├── table: default.system.numbers
        │       ├── filters: []
        │       ├── order by: []
        │       └── limit: NONE
        └── Project
            ├── projections: [COUNT(*) = 1 (#3),number (#5)]
            └── EvalScalar
                ├── scalars: [COUNT(*) (#4) = 1]
                └── Aggregate(Final)
                    ├── group items: [subquery_5 (#5)]
                    ├── aggregate functions: [COUNT(*)]
                    └── Aggregate(Partial)
                        ├── group items: [subquery_5 (#5)]
                        ├── aggregate functions: [COUNT(*)]
                        └── HashJoin: INNER
                            ├── build keys: [numbers.number (#2)]
                            ├── probe keys: [subquery_5 (#5)]
                            ├── other filters: []
                            ├── PhysicalScan
                            │   ├── table: default.system.numbers
                            │   ├── filters: []
                            │   ├── order by: []
                            │   └── limit: NONE
                            └── PhysicalScan
                                ├── table: default.system.numbers
                                ├── filters: []
                                ├── order by: []
                                └── limit: NONE

statement query T
explain select t.number from numbers(1) as t where exists(select * from numbers(1) as t1 where t.number > t1.number) and not exists(select * from numbers(1) as t1 where t.number < t1.number);

----
Project
├── projections: [number (#0)]
└── Filter
    ├── filters: [not(4 (#4))]
    └── HashJoin: MARK
        ├── build keys: [subquery_0 (#0)]
        ├── probe keys: [subquery_3 (#3)]
        ├── other filters: []
        ├── Filter
        │   ├── filters: [subquery_3 (#3) < t1.number (#2)]
        │   └── CrossJoin
        │       ├── build keys: []
        │       ├── probe keys: []
        │       ├── other filters: []
        │       ├── PhysicalScan
        │       │   ├── table: default.system.numbers
        │       │   ├── filters: []
        │       │   ├── order by: []
        │       │   └── limit: NONE
        │       └── PhysicalScan
        │           ├── table: default.system.numbers
        │           ├── filters: []
        │           ├── order by: []
        │           └── limit: NONE
        └── HashJoin: SEMI
            ├── build keys: []
            ├── probe keys: []
            ├── other filters: [t.number (#0) > t1.number (#1)]
            ├── PhysicalScan
            │   ├── table: default.system.numbers
            │   ├── filters: []
            │   ├── order by: []
            │   └── limit: NONE
            └── PhysicalScan
                ├── table: default.system.numbers
                ├── filters: []
                ├── order by: []
                └── limit: NONE

