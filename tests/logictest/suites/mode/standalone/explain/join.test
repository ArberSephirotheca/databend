statement query T
explain select t.number from numbers(1) as t, numbers(1) as t1 where t.number = t1.number;

----
Project
├── projections: [number (#0)]
└── HashJoin: INNER
    ├── build keys: [t1.number (#1)]
    ├── probe keys: [t.number (#0)]
    ├── other filters: []
    ├── PhysicalScan
    │   ├── table: default.system.numbers
    │   ├── filters: []
    │   ├── order by: []
    │   └── limit: NONE
    └── PhysicalScan
        ├── table: default.system.numbers
        ├── filters: []
        ├── order by: []
        └── limit: NONE

statement query T
explain select t.number from numbers(1) as t, numbers(1) as t1 where t.number = t1.number and t.number = t1.number + 1;

----
Project
├── projections: [number (#0)]
└── HashJoin: INNER
    ├── build keys: [t1.number (#1), +(t1.number (#1), 1)]
    ├── probe keys: [t.number (#0), t.number (#0)]
    ├── other filters: []
    ├── PhysicalScan
    │   ├── table: default.system.numbers
    │   ├── filters: []
    │   ├── order by: []
    │   └── limit: NONE
    └── PhysicalScan
        ├── table: default.system.numbers
        ├── filters: []
        ├── order by: []
        └── limit: NONE

statement query T
explain select t.number from numbers(1) as t, numbers(1) as t1 where t.number > 1 and 1 < t1.number;

----
Project
├── projections: [number (#0)]
└── CrossJoin
    ├── build keys: []
    ├── probe keys: []
    ├── other filters: []
    ├── Filter
    │   ├── filters: [t.number (#0) > 1]
    │   └── PhysicalScan
    │       ├── table: default.system.numbers
    │       ├── filters: [t.number (#0) > 1]
    │       ├── order by: []
    │       └── limit: NONE
    └── Filter
        ├── filters: [1 < t1.number (#1)]
        └── PhysicalScan
            ├── table: default.system.numbers
            ├── filters: [1 < t1.number (#1)]
            ├── order by: []
            └── limit: NONE

statement query T
explain select t.number from numbers(1) as t, numbers(1) as t1 where t.number + t1.number = 1;

----
Project
├── projections: [number (#0)]
└── Filter
    ├── filters: [+(t.number (#0), t1.number (#1)) = 1]
    └── CrossJoin
        ├── build keys: []
        ├── probe keys: []
        ├── other filters: []
        ├── PhysicalScan
        │   ├── table: default.system.numbers
        │   ├── filters: []
        │   ├── order by: []
        │   └── limit: NONE
        └── PhysicalScan
            ├── table: default.system.numbers
            ├── filters: []
            ├── order by: []
            └── limit: NONE

statement query T
explain select t.number from numbers(1) as t, numbers(1) as t1 where t.number = cast(t1.number as string);

----
Project
├── projections: [number (#0)]
└── HashJoin: INNER
    ├── build keys: [CAST(CAST(t1.number (#1) AS VARCHAR) AS DOUBLE)]
    ├── probe keys: [CAST(t.number (#0) AS DOUBLE)]
    ├── other filters: []
    ├── PhysicalScan
    │   ├── table: default.system.numbers
    │   ├── filters: []
    │   ├── order by: []
    │   └── limit: NONE
    └── PhysicalScan
        ├── table: default.system.numbers
        ├── filters: []
        ├── order by: []
        └── limit: NONE

statement query T
explain select t.number from numbers(1) as t, numbers(1) as t1, numbers(1) as t2 where t1.number = t2.number and t.number = 1;

----
Project
├── projections: [number (#0)]
└── HashJoin: INNER
    ├── build keys: [t2.number (#2)]
    ├── probe keys: [t1.number (#1)]
    ├── other filters: []
    ├── CrossJoin
    │   ├── build keys: []
    │   ├── probe keys: []
    │   ├── other filters: []
    │   ├── Filter
    │   │   ├── filters: [t.number (#0) = 1]
    │   │   └── PhysicalScan
    │   │       ├── table: default.system.numbers
    │   │       ├── filters: [t.number (#0) = 1]
    │   │       ├── order by: []
    │   │       └── limit: NONE
    │   └── PhysicalScan
    │       ├── table: default.system.numbers
    │       ├── filters: []
    │       ├── order by: []
    │       └── limit: NONE
    └── PhysicalScan
        ├── table: default.system.numbers
        ├── filters: []
        ├── order by: []
        └── limit: NONE

