statement query T
explain select * from (select a from (select number as a, number + 1 as b from numbers(1)));

----
Project: [number (#0)]
└── Scan: default.system.numbers, filters: [], Sort: [none], limit: [none]

statement query T
explain select a from (select number as a, count(*) as b from numbers(1) group by a);

----
Project: [number (#0)]
└── Aggregate(Final): group items: [numbers.number (#0)], aggregate functions: []
    └── Aggregate(Partial): group items: [numbers.number (#0)], aggregate functions: []
        └── Scan: default.system.numbers, filters: [], Sort: [none], limit: [none]

statement query T
explain select a from (select number as a, number b, sum(number) as c, number as d, number as e from numbers(1) group by a, b, d, e) where b > 1 order by d limit 1;

----
Project: [number (#0)]
└── Limit: [1], Offset: [0]
    └── Sort: [number (#0) ASC], limit: [1]
        └── Project: [number (#0)]
            └── Filter: [numbers.b (#0) > 1]
                └── Aggregate(Final): group items: [numbers.number (#0), numbers.number (#0), numbers.number (#0), numbers.number (#0)], aggregate functions: []
                    └── Aggregate(Partial): group items: [numbers.number (#0), numbers.number (#0), numbers.number (#0), numbers.number (#0)], aggregate functions: []
                        └── Scan: default.system.numbers, filters: [], Sort: [none], limit: [none]

statement query T
explain select * from (select t1.a from (select number + 1 as a, number + 1 as b, number + 1 as c, number + 1 as d from numbers(1)) as t1, (select number + 1 as a, number + 1 as b, number + 1 as c from numbers(1)) as t2 where t1.b = t2.b and t1.c = 1);

----
Project: [a (#1)]
└── HashJoin: INNER, build keys: [t2.b (#11)], probe keys: [t1.b (#2)], join filters: []
    ├── Project: [a (#1),b (#2)]
    │   └── Filter: [t1.c (#3) = 1]
    │       └── EvalScalar: [+(numbers.number (#0), 1), +(numbers.number (#0), 1), +(numbers.number (#0), 1)]
    │           └── Scan: default.system.numbers, filters: [], Sort: [none], limit: [none]
    └── Project: [b (#11)]
        └── EvalScalar: [+(numbers.number (#9), 1)]
            └── Scan: default.system.numbers, filters: [], Sort: [none], limit: [none]

statement query T
explain select t1.a from (select number + 1 as a, number + 1 as b from numbers(1)) as t1 where t1.a = (select count(*) from (select t2.a, t3.a from (select number + 1 as a, number + 1 as b, number + 1 as c, number + 1 as d from numbers(1)) as t2, (select number + 1 as a, number + 1 as b, number + 1 as c from numbers(1)) as t3 where t2.b = t3.b and t2.c = 1));

----
Project: [a (#1)]
└── Filter: [t1.a (#1) = scalar_subquery_21 (#21)]
    └── HashJoin: SINGLE, build keys: [], probe keys: [], join filters: []
        ├── Project: [a (#1)]
        │   └── EvalScalar: [+(numbers.number (#0), 1)]
        │       └── Scan: default.system.numbers, filters: [], Sort: [none], limit: [none]
        └── Project: [COUNT(*) (#21)]
            └── EvalScalar: [COUNT(*) (#22)]
                └── Aggregate(Final): group items: [], aggregate functions: [COUNT(*)]
                    └── Aggregate(Partial): group items: [], aggregate functions: [COUNT(*)]
                        └── Project: [a (#6)]
                            └── HashJoin: INNER, build keys: [t3.b (#16)], probe keys: [t2.b (#7)], join filters: []
                                ├── Project: [a (#6),b (#7)]
                                │   └── Filter: [t2.c (#8) = 1]
                                │       └── EvalScalar: [+(numbers.number (#5), 1), +(numbers.number (#5), 1), +(numbers.number (#5), 1)]
                                │           └── Scan: default.system.numbers, filters: [], Sort: [none], limit: [none]
                                └── Project: [b (#16)]
                                    └── EvalScalar: [+(numbers.number (#14), 1)]
                                        └── Scan: default.system.numbers, filters: [], Sort: [none], limit: [none]

statement query T
explain select name from system.functions order by example;

----
Project: [name (#0)]
└── Sort: [example (#7) ASC], limit: [none]
    └── Scan: default.system.functions, filters: [], Sort: [example (#7) ASC], limit: [none]

statement query T
explain select t.number from numbers(10) t where exists(select * from numbers(10));

----
Project: [number (#0)]
└── CrossJoin
    ├── Project: [subquery (#3)]
    │   └── Filter: [subquery_3 (#3)]
    │       └── EvalScalar: [count(*) (#2) = 1]
    │           └── Aggregate(Final): group items: [], aggregate functions: [count(*)]
    │               └── Aggregate(Partial): group items: [], aggregate functions: [count(*)]
    │                   └── Limit: [1], Offset: [0]
    │                       └── Scan: default.system.numbers, filters: [], Sort: [none], limit: [1]
    └── Scan: default.system.numbers, filters: [], Sort: [none], limit: [none]

