statement ok
DROP TABLE IF EXISTS data2013;

statement ok
DROP TABLE IF EXISTS data2014;

statement ok
DROP TABLE IF EXISTS data2015;

statement ok
CREATE TABLE data2013 (name String, value UInt32);

statement ok
CREATE TABLE data2014 (name String, value UInt32);

statement ok
CREATE TABLE data2015 (data_name String, data_value UInt32);

statement ok
CREATE TABLE data2016 (name String, value UInt32);

statement ok
INSERT INTO data2013(name,value) VALUES('Alice', 1000), ('Bob', 2000), ('Carol', 5000);


statement ok
INSERT INTO data2014(name,value) VALUES('Alice', 2000), ('Bob', 2000), ('Dennis', 35000);

statement ok
INSERT INTO data2015(data_name, data_value) VALUES('Foo', 42), ('Bar', 1);

statement query I
SELECT val FROM
(SELECT value AS val FROM data2013 WHERE name = 'Alice'
UNION ALL
SELECT value AS val FROM data2014 WHERE name = 'Alice')
ORDER BY val ASC;

----
1000
2000

statement query IT
SELECT val, name FROM
(SELECT value AS val, value AS val_1, name FROM data2013 WHERE name = 'Alice'
UNION ALL
SELECT value AS val, value, name FROM data2014 WHERE name = 'Alice')
ORDER BY val ASC;

----
1000 Alice
2000 Alice

statement query TI
select * from data2013 union all select * from data2015 order by value;

----
Bar 1
Foo 42
Alice 1000
Bob 2000
Carol 5000

statement query I
select value from data2016 union all select data_value from data2015 order by value;

----
1
42

statement query I
select data_value from data2015 union all select value from data2016 order by data_value;

----
1
42

statement ok
INSERT INTO data2013(name,value) VALUES('Alice', 1000);

statement query I
select value from data2013 union select data_value from data2015 order by value;

----
1
42
1000
2000
5000

statement ok
DROP TABLE data2013;

statement ok
DROP TABLE data2014;

statement ok
DROP TABLE data2015;

statement ok
DROP TABLE data2016;

statement query TTTTI
SELECT 'Кирилл' as a, 'Müller' as b, '我是谁' as c, 'ASCII' as d, 2 as id UNION SELECT NULL as a, NULL as b, NULL as c, NULL as d, 1 as id order by id;

----
NULL NULL NULL NULL 1
Кирилл Müller 我是谁 ASCII 2

statement query TTFI
SELECT 'Кирилл' as a, 'Müller' as b, 1.0 as c, 2 as id UNION SELECT NULL as a, NULL as b, 1 as c,  1 as id order by id;

----
NULL NULL 1.0 1
Кирилл Müller 1.0 2

statement query TI
WITH tbl AS
  (SELECT '12-17' AS age,
          'a' AS device_id
   UNION ALL SELECT '17-23' AS age,
                    'a' AS device_id
   UNION ALL SELECT '17-23' AS age,
                    'b' AS device_id
   UNION ALL SELECT '24-30' AS age,
                    'c' AS device_id
   UNION ALL SELECT '24-30' AS age,
                    'd' AS device_id)
SELECT age,
       count(DISTINCT device_id) AS cnt
FROM
  (SELECT age,
          device_id
   FROM tbl
   UNION ALL SELECT if(age IN ('12-17', '17-23'), '年轻', '非年轻') AS age,
                    device_id
   FROM tbl) AS t
GROUP BY age
ORDER BY age,
         cnt;

----
12-17  1
17-23  2
24-30  2
年轻  2
非年轻  2

statement ok
drop view if exists t;

statement ok
drop table if exists t1;

statement ok
drop table if exists t2;

statement ok
create table t1 (a int, b int);

statement ok
insert into t1 values (1, 2), (2, 3);

statement ok
create table t2 (a int, b int);

statement ok
insert into t2 values (1, 2), (2, 3);

statement ok
create view t as select * from t1 union all select * from t2;

statement query T
explain select * from t where a > b;

----
UnionAll
├── TableScan
│   ├── table: default.default.t1
│   ├── read rows: 0
│   ├── read bytes: 0
│   ├── partitions total: 1
│   ├── partitions scanned: 0
│   └── push downs: [filters: [(a > b)], limit: NONE]
└── TableScan
    ├── table: default.default.t2
    ├── read rows: 0
    ├── read bytes: 0
    ├── partitions total: 1
    ├── partitions scanned: 0
    └── push downs: [filters: [(a > b)], limit: NONE]

statement query T
explain select * from t where a > 1;

----
UnionAll
├── TableScan
│   ├── table: default.default.t1
│   ├── read rows: 2
│   ├── read bytes: 62
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   └── push downs: [filters: [(a > 1)], limit: NONE]
└── TableScan
    ├── table: default.default.t2
    ├── read rows: 2
    ├── read bytes: 62
    ├── partitions total: 1
    ├── partitions scanned: 1
    └── push downs: [filters: [(a > 1)], limit: NONE]

statement query T
explain select * from t limit 3;

----
Limit
├── limit: 3
├── offset: 0
└── UnionAll
    ├── Limit
    │   ├── limit: 3
    │   ├── offset: 0
    │   └── TableScan
    │       ├── table: default.default.t1
    │       ├── read rows: 2
    │       ├── read bytes: 62
    │       ├── partitions total: 1
    │       ├── partitions scanned: 1
    │       └── push downs: [filters: [], limit: 3]
    └── Limit
        ├── limit: 3
        ├── offset: 0
        └── TableScan
            ├── table: default.default.t2
            ├── read rows: 2
            ├── read bytes: 62
            ├── partitions total: 1
            ├── partitions scanned: 1
            └── push downs: [filters: [], limit: 3]

statement query T
explain select * from t limit 3 offset 1;

----
Limit
├── limit: 3
├── offset: 1
└── UnionAll
    ├── Limit
    │   ├── limit: 4
    │   ├── offset: 0
    │   └── TableScan
    │       ├── table: default.default.t1
    │       ├── read rows: 2
    │       ├── read bytes: 62
    │       ├── partitions total: 1
    │       ├── partitions scanned: 1
    │       └── push downs: [filters: [], limit: 4]
    └── Limit
        ├── limit: 4
        ├── offset: 0
        └── TableScan
            ├── table: default.default.t2
            ├── read rows: 2
            ├── read bytes: 62
            ├── partitions total: 1
            ├── partitions scanned: 1
            └── push downs: [filters: [], limit: 4]

statement query T
explain select * from t1 union all select * from t2 limit 1;

----
Limit
├── limit: 1
├── offset: 0
└── UnionAll
    ├── Limit
    │   ├── limit: 1
    │   ├── offset: 0
    │   └── TableScan
    │       ├── table: default.default.t1
    │       ├── read rows: 2
    │       ├── read bytes: 62
    │       ├── partitions total: 1
    │       ├── partitions scanned: 1
    │       └── push downs: [filters: [], limit: 1]
    └── Limit
        ├── limit: 1
        ├── offset: 0
        └── TableScan
            ├── table: default.default.t2
            ├── read rows: 2
            ├── read bytes: 62
            ├── partitions total: 1
            ├── partitions scanned: 1
            └── push downs: [filters: [], limit: 1]

statement ok
drop table t1;

statement ok
drop table t2;

statement ok
drop view t;
