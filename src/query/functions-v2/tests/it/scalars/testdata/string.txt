ast            : upper('Abc')
raw expr       : upper("Abc")
checked expr   : upper<String>("Abc")
optimized expr : "ABC"
output type    : String
output domain  : Unknown
output         : "ABC"


ast            : upper('Dobr√Ω den')
raw expr       : upper("Dobr√Ω den")
checked expr   : upper<String>("Dobr√Ω den")
optimized expr : "DOBR√ù DEN"
output type    : String
output domain  : Unknown
output         : "DOBR√ù DEN"


ast            : upper('√üüòÄÂ±±')
raw expr       : upper("√üüòÄÂ±±")
checked expr   : upper<String>("√üüòÄÂ±±")
optimized expr : "SSüòÄÂ±±"
output type    : String
output domain  : Unknown
output         : "SSüòÄÂ±±"


ast            : upper(NULL)
raw expr       : upper(NULL)
checked expr   : upper<NULL>(NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : ucase(a)
raw expr       : ucase(ColumnRef(0)::String)
checked expr   : upper<String>(ColumnRef(0))
evaluation:
+--------+-------------------+-------------+
|        | a                 | Output      |
+--------+-------------------+-------------+
| Type   | String            | String      |
| Domain | {"Abc"..="√üüòÄÂ±±"} | Unknown     |
| Row 0  | "Abc"             | "ABC"       |
| Row 1  | "Dobr√Ω den"       | "DOBR√ù DEN" |
| Row 2  | "√üüòÄÂ±±"           | "SSüòÄÂ±±"    |
+--------+-------------------+-------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                             |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [65, 98, 99, 68, 111, 98, 114, 195, 189, 32, 100, 101, 110, 195, 159, 240, 159, 152, 128, 229, 177, 177], offsets: [0, 3, 13, 22] }) |
| Output | String(StringColumn { data: [65, 66, 67, 68, 79, 66, 82, 195, 157, 32, 68, 69, 78, 83, 83, 240, 159, 152, 128, 229, 177, 177], offsets: [0, 3, 13, 22] })        |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : lower('Abc')
raw expr       : lower("Abc")
checked expr   : lower<String>("Abc")
optimized expr : "abc"
output type    : String
output domain  : Unknown
output         : "abc"


ast            : lower('DOBR√ù DEN')
raw expr       : lower("DOBR√ù DEN")
checked expr   : lower<String>("DOBR√ù DEN")
optimized expr : "dobr√Ω den"
output type    : String
output domain  : Unknown
output         : "dobr√Ω den"


ast            : lower('ƒ∞üòÄÂ±±')
raw expr       : lower("ƒ∞üòÄÂ±±")
checked expr   : lower<String>("ƒ∞üòÄÂ±±")
optimized expr : "i\u{307}üòÄÂ±±"
output type    : String
output domain  : Unknown
output         : "i\u{307}üòÄÂ±±"


ast            : lower(NULL)
raw expr       : lower(NULL)
checked expr   : lower<NULL>(NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : lcase(a)
raw expr       : lcase(ColumnRef(0)::String)
checked expr   : lower<String>(ColumnRef(0))
evaluation:
+--------+-------------------+----------------+
|        | a                 | Output         |
+--------+-------------------+----------------+
| Type   | String            | String         |
| Domain | {"Abc"..="ƒ∞üòÄÂ±±"} | Unknown        |
| Row 0  | "Abc"             | "abc"          |
| Row 1  | "DOBR√ù DEN"       | "dobr√Ω den"    |
| Row 2  | "ƒ∞üòÄÂ±±"           | "i\u{307}üòÄÂ±±" |
+--------+-------------------+----------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                   |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [65, 98, 99, 68, 79, 66, 82, 195, 157, 32, 68, 69, 78, 196, 176, 240, 159, 152, 128, 229, 177, 177], offsets: [0, 3, 13, 22] })            |
| Output | String(StringColumn { data: [97, 98, 99, 100, 111, 98, 114, 195, 189, 32, 100, 101, 110, 105, 204, 135, 240, 159, 152, 128, 229, 177, 177], offsets: [0, 3, 13, 23] }) |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : bit_length('latin')
raw expr       : bit_length("latin")
checked expr   : bit_length<String>("latin")
optimized expr : 40_u64
output type    : UInt64
output domain  : Unknown
output         : 40


ast            : bit_length(NULL)
raw expr       : bit_length(NULL)
checked expr   : bit_length<NULL>(NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : bit_length(a)
raw expr       : bit_length(ColumnRef(0)::String)
checked expr   : bit_length<String>(ColumnRef(0))
evaluation:
+--------+-----------------------------------+---------+
|        | a                                 | Output  |
+--------+-----------------------------------+---------+
| Type   | String                            | UInt64  |
| Domain | {"latin"..="–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ and latin"} | Unknown |
| Row 0  | "latin"                           | 40      |
| Row 1  | "–∫–∏—Ä–∏–ª–ª–∏—Ü–∞"                       | 144     |
| Row 2  | "–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ and latin"             | 224     |
+--------+-----------------------------------+---------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                                                                                               |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [108, 97, 116, 105, 110, 208, 186, 208, 184, 209, 128, 208, 184, 208, 187, 208, 187, 208, 184, 209, 134, 208, 176, 208, 186, 208, 184, 209, 128, 208, 184, 208, 187, 208, 187, 208, 184, 209, 134, 208, 176, 32, 97, 110, 100, 32, 108, 97, 116, 105, 110], offsets: [0, 5, 23, 51] }) |
| Output | UInt64([40, 144, 224])                                                                                                                                                                                                                                                                                             |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : octet_length('latin')
raw expr       : octet_length("latin")
checked expr   : octet_length<String>("latin")
optimized expr : 5_u64
output type    : UInt64
output domain  : Unknown
output         : 5


ast            : octet_length(NULL)
raw expr       : octet_length(NULL)
checked expr   : octet_length<NULL>(NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : length(a)
raw expr       : length(ColumnRef(0)::String)
checked expr   : octet_length<String>(ColumnRef(0))
evaluation:
+--------+-----------------------------------+---------+
|        | a                                 | Output  |
+--------+-----------------------------------+---------+
| Type   | String                            | UInt64  |
| Domain | {"latin"..="–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ and latin"} | Unknown |
| Row 0  | "latin"                           | 5       |
| Row 1  | "–∫–∏—Ä–∏–ª–ª–∏—Ü–∞"                       | 18      |
| Row 2  | "–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ and latin"             | 28      |
+--------+-----------------------------------+---------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                                                                                               |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [108, 97, 116, 105, 110, 208, 186, 208, 184, 209, 128, 208, 184, 208, 187, 208, 187, 208, 184, 209, 134, 208, 176, 208, 186, 208, 184, 209, 128, 208, 184, 208, 187, 208, 187, 208, 184, 209, 134, 208, 176, 32, 97, 110, 100, 32, 108, 97, 116, 105, 110], offsets: [0, 5, 23, 51] }) |
| Output | UInt64([5, 18, 28])                                                                                                                                                                                                                                                                                                |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : char_length('latin')
raw expr       : char_length("latin")
checked expr   : char_length<String>("latin")
optimized expr : 5_u64
output type    : UInt64
output domain  : Unknown
output         : 5


ast            : char_length(NULL)
raw expr       : char_length(NULL)
checked expr   : char_length<NULL>(NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : character_length(a)
raw expr       : character_length(ColumnRef(0)::String)
checked expr   : char_length<String>(ColumnRef(0))
evaluation:
+--------+-----------------------------------+---------+
|        | a                                 | Output  |
+--------+-----------------------------------+---------+
| Type   | String                            | UInt64  |
| Domain | {"latin"..="–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ and latin"} | Unknown |
| Row 0  | "latin"                           | 5       |
| Row 1  | "–∫–∏—Ä–∏–ª–ª–∏—Ü–∞"                       | 9       |
| Row 2  | "–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ and latin"             | 19      |
+--------+-----------------------------------+---------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                                                                                               |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [108, 97, 116, 105, 110, 208, 186, 208, 184, 209, 128, 208, 184, 208, 187, 208, 187, 208, 184, 209, 134, 208, 176, 208, 186, 208, 184, 209, 128, 208, 184, 208, 187, 208, 187, 208, 184, 209, 134, 208, 176, 32, 97, 110, 100, 32, 108, 97, 116, 105, 110], offsets: [0, 5, 23, 51] }) |
| Output | UInt64([5, 9, 19])                                                                                                                                                                                                                                                                                                 |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : to_base64('Abc')
raw expr       : to_base64("Abc")
checked expr   : to_base64<String>("Abc")
optimized expr : "QWJj"
output type    : String
output domain  : Unknown
output         : "QWJj"


ast            : to_base64('123')
raw expr       : to_base64("123")
checked expr   : to_base64<String>("123")
optimized expr : "MTIz"
output type    : String
output domain  : Unknown
output         : "MTIz"


ast            : to_base64(Null)
raw expr       : to_base64(NULL)
checked expr   : to_base64<NULL>(NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : to_base64(a)
raw expr       : to_base64(ColumnRef(0)::String)
checked expr   : to_base64<String>(ColumnRef(0))
evaluation:
+--------+-----------------+---------+
|        | a               | Output  |
+--------+-----------------+---------+
| Type   | String          | String  |
| Domain | {"123"..="Abc"} | Unknown |
| Row 0  | "Abc"           | "QWJj"  |
| Row 1  | "123"           | "MTIz"  |
+--------+-----------------+---------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------+
| Column | Data                                                                                  |
+--------+---------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [65, 98, 99, 49, 50, 51], offsets: [0, 3, 6] })           |
| Output | String(StringColumn { data: [81, 87, 74, 106, 77, 84, 73, 122], offsets: [0, 4, 8] }) |
+--------+---------------------------------------------------------------------------------------+


ast            : from_base64('QWJj')
raw expr       : from_base64("QWJj")
checked expr   : from_base64<String>("QWJj")
optimized expr : "Abc"
output type    : String
output domain  : Unknown
output         : "Abc"


ast            : from_base64('MTIz')
raw expr       : from_base64("MTIz")
checked expr   : from_base64<String>("MTIz")
optimized expr : "123"
output type    : String
output domain  : Unknown
output         : "123"


ast            : from_base64(Null)
raw expr       : from_base64(NULL)
checked expr   : from_base64<NULL>(NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : from_base64(a)
raw expr       : from_base64(ColumnRef(0)::String)
checked expr   : from_base64<String>(ColumnRef(0))
evaluation:
+--------+-------------------+---------+
|        | a                 | Output  |
+--------+-------------------+---------+
| Type   | String            | String  |
| Domain | {"MTIz"..="QWJj"} | Unknown |
| Row 0  | "QWJj"            | "Abc"   |
| Row 1  | "MTIz"            | "123"   |
+--------+-------------------+---------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------+
| Column | Data                                                                                  |
+--------+---------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [81, 87, 74, 106, 77, 84, 73, 122], offsets: [0, 4, 8] }) |
| Output | String(StringColumn { data: [65, 98, 99, 49, 50, 51], offsets: [0, 3, 6] })           |
+--------+---------------------------------------------------------------------------------------+


ast            : quote('a\0b')
raw expr       : quote("a\0b")
checked expr   : quote<String>("a\0b")
optimized expr : "a\\0b"
output type    : String
output domain  : Unknown
output         : "a\\0b"


ast            : quote('a\'b')
raw expr       : quote("a'b")
checked expr   : quote<String>("a'b")
optimized expr : "a\\'b"
output type    : String
output domain  : Unknown
output         : "a\\'b"


ast            : quote('a\"b')
raw expr       : quote("a\"b")
checked expr   : quote<String>("a\"b")
optimized expr : "a\\\"b"
output type    : String
output domain  : Unknown
output         : "a\\\"b"


ast            : quote('a\bb')
raw expr       : quote("a\u{8}b")
checked expr   : quote<String>("a\u{8}b")
optimized expr : "a\\bb"
output type    : String
output domain  : Unknown
output         : "a\\bb"


ast            : quote('a\nb')
raw expr       : quote("a\nb")
checked expr   : quote<String>("a\nb")
optimized expr : "a\\nb"
output type    : String
output domain  : Unknown
output         : "a\\nb"


ast            : quote('a\rb')
raw expr       : quote("a\rb")
checked expr   : quote<String>("a\rb")
optimized expr : "a\\rb"
output type    : String
output domain  : Unknown
output         : "a\\rb"


ast            : quote('a\tb')
raw expr       : quote("a\tb")
checked expr   : quote<String>("a\tb")
optimized expr : "a\\tb"
output type    : String
output domain  : Unknown
output         : "a\\tb"


ast            : quote('a\\b')
raw expr       : quote("a\\b")
checked expr   : quote<String>("a\\b")
optimized expr : "a\\\\b"
output type    : String
output domain  : Unknown
output         : "a\\\\b"


ast            : quote('‰Ω†Â•Ω')
raw expr       : quote("‰Ω†Â•Ω")
checked expr   : quote<String>("‰Ω†Â•Ω")
optimized expr : "‰Ω†Â•Ω"
output type    : String
output domain  : Unknown
output         : "‰Ω†Â•Ω"


ast            : quote('√üüòÄÂ±±')
raw expr       : quote("√üüòÄÂ±±")
checked expr   : quote<String>("√üüòÄÂ±±")
optimized expr : "√üüòÄÂ±±"
output type    : String
output domain  : Unknown
output         : "√üüòÄÂ±±"


ast            : quote('Dobr√Ω den')
raw expr       : quote("Dobr√Ω den")
checked expr   : quote<String>("Dobr√Ω den")
optimized expr : "Dobr√Ω den"
output type    : String
output domain  : Unknown
output         : "Dobr√Ω den"


ast            : quote(Null)
raw expr       : quote(NULL)
checked expr   : quote<NULL>(NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : quote(a)
raw expr       : quote(ColumnRef(0)::String)
checked expr   : quote<String>(ColumnRef(0))
evaluation:
+--------+---------------------+-------------+
|        | a                   | Output      |
+--------+---------------------+-------------+
| Type   | String              | String      |
| Domain | {"a\\'b"..="a\\nb"} | Unknown     |
| Row 0  | "a\\0b"             | "a\\\\0b"   |
| Row 1  | "a\\'b"             | "a\\\\\\'b" |
| Row 2  | "a\\nb"             | "a\\\\nb"   |
+--------+---------------------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                      |
+--------+---------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 92, 48, 98, 97, 92, 39, 98, 97, 92, 110, 98], offsets: [0, 4, 8, 12] })                  |
| Output | String(StringColumn { data: [97, 92, 92, 48, 98, 97, 92, 92, 92, 39, 98, 97, 92, 92, 110, 98], offsets: [0, 5, 11, 16] }) |
+--------+---------------------------------------------------------------------------------------------------------------------------+


ast            : reverse('abc')
raw expr       : reverse("abc")
checked expr   : reverse<String>("abc")
optimized expr : "cba"
output type    : String
output domain  : Unknown
output         : "cba"


ast            : reverse('a')
raw expr       : reverse("a")
checked expr   : reverse<String>("a")
optimized expr : "a"
output type    : String
output domain  : Unknown
output         : "a"


ast            : reverse('')
raw expr       : reverse("")
checked expr   : reverse<String>("")
optimized expr : ""
output type    : String
output domain  : Unknown
output         : ""


ast            : reverse('‰Ω†Â•Ω')
raw expr       : reverse("‰Ω†Â•Ω")
checked expr   : reverse<String>("‰Ω†Â•Ω")
optimized expr : "ÔøΩÔøΩÂ†ΩÔøΩ"
output type    : String
output domain  : Unknown
output         : "ÔøΩÔøΩÂ†ΩÔøΩ"


ast            : reverse('√üüòÄÂ±±')
raw expr       : reverse("√üüòÄÂ±±")
checked expr   : reverse<String>("√üüòÄÂ±±")
optimized expr : "ÔøΩÔøΩÂÄòÔøΩÔøΩÔøΩ"
output type    : String
output domain  : Unknown
output         : "ÔøΩÔøΩÂÄòÔøΩÔøΩÔøΩ"


ast            : reverse('Dobr√Ω den')
raw expr       : reverse("Dobr√Ω den")
checked expr   : reverse<String>("Dobr√Ω den")
optimized expr : "ned ÔøΩÔøΩrboD"
output type    : String
output domain  : Unknown
output         : "ned ÔøΩÔøΩrboD"


ast            : reverse(Null)
raw expr       : reverse(NULL)
checked expr   : reverse<NULL>(NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : reverse(a)
raw expr       : reverse(ColumnRef(0)::String)
checked expr   : reverse<String>(ColumnRef(0))
evaluation:
+--------+--------------+---------+
|        | a            | Output  |
+--------+--------------+---------+
| Type   | String       | String  |
| Domain | {""..="abc"} | Unknown |
| Row 0  | "abc"        | "cba"   |
| Row 1  | "a"          | "a"     |
| Row 2  | ""           | ""      |
+--------+--------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------+
| Column | Data                                                                   |
+--------+------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 98, 99, 97], offsets: [0, 3, 4, 4] }) |
| Output | String(StringColumn { data: [99, 98, 97, 97], offsets: [0, 3, 4, 4] }) |
+--------+------------------------------------------------------------------------+


ast            : ascii('1')
raw expr       : ascii("1")
checked expr   : ascii<String>("1")
optimized expr : 49_u8
output type    : UInt8
output domain  : {49..=49}
output         : 49


ast            : ascii('123')
raw expr       : ascii("123")
checked expr   : ascii<String>("123")
optimized expr : 49_u8
output type    : UInt8
output domain  : {49..=49}
output         : 49


ast            : ascii('-1')
raw expr       : ascii("-1")
checked expr   : ascii<String>("-1")
optimized expr : 45_u8
output type    : UInt8
output domain  : {45..=45}
output         : 45


ast            : ascii('')
raw expr       : ascii("")
checked expr   : ascii<String>("")
optimized expr : 0_u8
output type    : UInt8
output domain  : {0..=0}
output         : 0


ast            : ascii('‰Ω†Â•Ω')
raw expr       : ascii("‰Ω†Â•Ω")
checked expr   : ascii<String>("‰Ω†Â•Ω")
optimized expr : 228_u8
output type    : UInt8
output domain  : {228..=228}
output         : 228


ast            : ascii('üòÄ123')
raw expr       : ascii("üòÄ123")
checked expr   : ascii<String>("üòÄ123")
optimized expr : 240_u8
output type    : UInt8
output domain  : {240..=240}
output         : 240


ast            : ascii(Null)
raw expr       : ascii(NULL)
checked expr   : ascii<NULL>(NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : ascii(a)
raw expr       : ascii(ColumnRef(0)::String)
checked expr   : ascii<String>(ColumnRef(0))
evaluation:
+--------+-----------------+------------+
|        | a               | Output     |
+--------+-----------------+------------+
| Type   | String          | UInt8      |
| Domain | {"-1"..="‰Ω†Â•Ω"} | {45..=228} |
| Row 0  | "1"             | 49         |
| Row 1  | "123"           | 49         |
| Row 2  | "-1"            | 45         |
| Row 3  | "‰Ω†Â•Ω"          | 228        |
+--------+-----------------+------------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                             |
+--------+------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [49, 49, 50, 51, 45, 49, 228, 189, 160, 229, 165, 189], offsets: [0, 1, 4, 6, 12] }) |
| Output | UInt8([49, 49, 45, 228])                                                                                         |
+--------+------------------------------------------------------------------------------------------------------------------+


ast            : ascii(b)
raw expr       : ascii(ColumnRef(0)::String)
checked expr   : ascii<String>(ColumnRef(0))
optimized expr : 0_u8
evaluation:
+--------+-----------+---------+
|        | b         | Output  |
+--------+-----------+---------+
| Type   | String    | UInt8   |
| Domain | {""..=""} | {0..=0} |
| Row 0  | ""        | 0       |
+--------+-----------+---------+
evaluation (internal):
+--------+----------------------------------------------------+
| Column | Data                                               |
+--------+----------------------------------------------------+
| b      | String(StringColumn { data: [], offsets: [0, 0] }) |
| Output | UInt8([0])                                         |
+--------+----------------------------------------------------+


ast            : ltrim('   abc   ')
raw expr       : ltrim("   abc   ")
checked expr   : ltrim<String>("   abc   ")
optimized expr : "abc   "
output type    : String
output domain  : Unknown
output         : "abc   "


ast            : ltrim('  ')
raw expr       : ltrim("  ")
checked expr   : ltrim<String>("  ")
optimized expr : ""
output type    : String
output domain  : Unknown
output         : ""


ast            : ltrim(NULL)
raw expr       : ltrim(NULL)
checked expr   : ltrim<NULL>(NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : ltrim(a)
raw expr       : ltrim(ColumnRef(0)::String)
checked expr   : ltrim<String>(ColumnRef(0))
evaluation:
+--------+-----------------------+----------+
|        | a                     | Output   |
+--------+-----------------------+----------+
| Type   | String                | String   |
| Domain | {"   abc"..="abc   "} | Unknown  |
| Row 0  | "abc"                 | "abc"    |
| Row 1  | "   abc"              | "abc"    |
| Row 2  | "   abc   "           | "abc   " |
| Row 3  | "abc   "              | "abc   " |
+--------+-----------------------+----------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                        |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 98, 99, 32, 32, 32, 97, 98, 99, 32, 32, 32, 97, 98, 99, 32, 32, 32, 97, 98, 99, 32, 32, 32], offsets: [0, 3, 9, 18, 24] }) |
| Output | String(StringColumn { data: [97, 98, 99, 97, 98, 99, 97, 98, 99, 32, 32, 32, 97, 98, 99, 32, 32, 32], offsets: [0, 3, 6, 12, 18] })                         |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : rtrim('   abc   ')
raw expr       : rtrim("   abc   ")
checked expr   : rtrim<String>("   abc   ")
optimized expr : "   abc"
output type    : String
output domain  : Unknown
output         : "   abc"


ast            : rtrim('  ')
raw expr       : rtrim("  ")
checked expr   : rtrim<String>("  ")
optimized expr : ""
output type    : String
output domain  : Unknown
output         : ""


ast            : rtrim(NULL)
raw expr       : rtrim(NULL)
checked expr   : rtrim<NULL>(NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : rtrim(a)
raw expr       : rtrim(ColumnRef(0)::String)
checked expr   : rtrim<String>(ColumnRef(0))
evaluation:
+--------+-----------------------+----------+
|        | a                     | Output   |
+--------+-----------------------+----------+
| Type   | String                | String   |
| Domain | {"   abc"..="abc   "} | Unknown  |
| Row 0  | "abc"                 | "abc"    |
| Row 1  | "   abc"              | "   abc" |
| Row 2  | "   abc   "           | "   abc" |
| Row 3  | "abc   "              | "abc"    |
+--------+-----------------------+----------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                        |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 98, 99, 32, 32, 32, 97, 98, 99, 32, 32, 32, 97, 98, 99, 32, 32, 32, 97, 98, 99, 32, 32, 32], offsets: [0, 3, 9, 18, 24] }) |
| Output | String(StringColumn { data: [97, 98, 99, 32, 32, 32, 97, 98, 99, 32, 32, 32, 97, 98, 99, 97, 98, 99], offsets: [0, 3, 9, 15, 18] })                         |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim_leading('aaabbaaa', 'a')
raw expr       : trim_leading("aaabbaaa", "a")
checked expr   : trim_leading<String, String>("aaabbaaa", "a")
optimized expr : "bbaaa"
output type    : String
output domain  : Unknown
output         : "bbaaa"


ast            : trim_leading('aaabbaaa', 'aa')
raw expr       : trim_leading("aaabbaaa", "aa")
checked expr   : trim_leading<String, String>("aaabbaaa", "aa")
optimized expr : "abbaaa"
output type    : String
output domain  : Unknown
output         : "abbaaa"


ast            : trim_leading('aaaaaaaa', 'a')
raw expr       : trim_leading("aaaaaaaa", "a")
checked expr   : trim_leading<String, String>("aaaaaaaa", "a")
optimized expr : ""
output type    : String
output domain  : Unknown
output         : ""


ast            : trim_leading('aaabbaaa', 'b')
raw expr       : trim_leading("aaabbaaa", "b")
checked expr   : trim_leading<String, String>("aaabbaaa", "b")
optimized expr : "aaabbaaa"
output type    : String
output domain  : Unknown
output         : "aaabbaaa"


ast            : trim_leading(NULL, 'a')
raw expr       : trim_leading(NULL, "a")
checked expr   : trim_leading<NULL, String NULL>(NULL, CAST("a" AS String NULL))
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : trim_leading('aaaaaaaa', NULL)
raw expr       : trim_leading("aaaaaaaa", NULL)
checked expr   : trim_leading<String NULL, NULL>(CAST("aaaaaaaa" AS String NULL), NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : trim_leading(a, 'a')
raw expr       : trim_leading(ColumnRef(0)::String, "a")
checked expr   : trim_leading<String, String>(ColumnRef(0), "a")
evaluation:
+--------+-----------------------+-------------+----------+
|        | a                     | b           | Output   |
+--------+-----------------------+-------------+----------+
| Type   | String                | String      | String   |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown  |
| Row 0  | "aabbaa"              | "a"         | "bbaa"   |
| Row 1  | "bbccbb"              | "b"         | "bbccbb" |
| Row 2  | "ccddcc"              | "c"         | "ccddcc" |
+--------+-----------------------+-------------+----------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 4, 10, 16] })         |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim_leading(a, b)
raw expr       : trim_leading(ColumnRef(0)::String, ColumnRef(1)::String)
checked expr   : trim_leading<String, String>(ColumnRef(0), ColumnRef(1))
evaluation:
+--------+-----------------------+-------------+---------+
|        | a                     | b           | Output  |
+--------+-----------------------+-------------+---------+
| Type   | String                | String      | String  |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown |
| Row 0  | "aabbaa"              | "a"         | "bbaa"  |
| Row 1  | "bbccbb"              | "b"         | "ccbb"  |
| Row 2  | "ccddcc"              | "c"         | "ddcc"  |
+--------+-----------------------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [98, 98, 97, 97, 99, 99, 98, 98, 100, 100, 99, 99], offsets: [0, 4, 8, 12] })                          |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim_leading('aba', b)
raw expr       : trim_leading("aba", ColumnRef(1)::String)
checked expr   : trim_leading<String, String>("aba", ColumnRef(1))
evaluation:
+--------+-----------------------+-------------+---------+
|        | a                     | b           | Output  |
+--------+-----------------------+-------------+---------+
| Type   | String                | String      | String  |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown |
| Row 0  | "aabbaa"              | "a"         | "ba"    |
| Row 1  | "bbccbb"              | "b"         | "aba"   |
| Row 2  | "ccddcc"              | "c"         | "aba"   |
+--------+-----------------------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [98, 97, 97, 98, 97, 97, 98, 97], offsets: [0, 2, 5, 8] })                                             |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim_trailing('aaabbaaa', 'a')
raw expr       : trim_trailing("aaabbaaa", "a")
checked expr   : trim_trailing<String, String>("aaabbaaa", "a")
optimized expr : "aaabb"
output type    : String
output domain  : Unknown
output         : "aaabb"


ast            : trim_trailing('aaabbaaa', 'aa')
raw expr       : trim_trailing("aaabbaaa", "aa")
checked expr   : trim_trailing<String, String>("aaabbaaa", "aa")
optimized expr : "aaabba"
output type    : String
output domain  : Unknown
output         : "aaabba"


ast            : trim_trailing('aaaaaaaa', 'a')
raw expr       : trim_trailing("aaaaaaaa", "a")
checked expr   : trim_trailing<String, String>("aaaaaaaa", "a")
optimized expr : ""
output type    : String
output domain  : Unknown
output         : ""


ast            : trim_trailing('aaabbaaa', 'b')
raw expr       : trim_trailing("aaabbaaa", "b")
checked expr   : trim_trailing<String, String>("aaabbaaa", "b")
optimized expr : "aaabbaaa"
output type    : String
output domain  : Unknown
output         : "aaabbaaa"


ast            : trim_trailing(NULL, 'a')
raw expr       : trim_trailing(NULL, "a")
checked expr   : trim_trailing<NULL, String NULL>(NULL, CAST("a" AS String NULL))
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : trim_trailing('aaaaaaaa', NULL)
raw expr       : trim_trailing("aaaaaaaa", NULL)
checked expr   : trim_trailing<String NULL, NULL>(CAST("aaaaaaaa" AS String NULL), NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : trim_trailing(a, 'b')
raw expr       : trim_trailing(ColumnRef(0)::String, "b")
checked expr   : trim_trailing<String, String>(ColumnRef(0), "b")
evaluation:
+--------+-----------------------+-------------+----------+
|        | a                     | b           | Output   |
+--------+-----------------------+-------------+----------+
| Type   | String                | String      | String   |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown  |
| Row 0  | "aabbaa"              | "a"         | "aabbaa" |
| Row 1  | "bbccbb"              | "b"         | "bbcc"   |
| Row 2  | "ccddcc"              | "c"         | "ccddcc" |
+--------+-----------------------+-------------+----------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 10, 16] })         |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim_trailing(a, b)
raw expr       : trim_trailing(ColumnRef(0)::String, ColumnRef(1)::String)
checked expr   : trim_trailing<String, String>(ColumnRef(0), ColumnRef(1))
evaluation:
+--------+-----------------------+-------------+---------+
|        | a                     | b           | Output  |
+--------+-----------------------+-------------+---------+
| Type   | String                | String      | String  |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown |
| Row 0  | "aabbaa"              | "a"         | "aabb"  |
| Row 1  | "bbccbb"              | "b"         | "bbcc"  |
| Row 2  | "ccddcc"              | "c"         | "ccdd"  |
+--------+-----------------------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [97, 97, 98, 98, 98, 98, 99, 99, 99, 99, 100, 100], offsets: [0, 4, 8, 12] })                          |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim_trailing('aba', b)
raw expr       : trim_trailing("aba", ColumnRef(1)::String)
checked expr   : trim_trailing<String, String>("aba", ColumnRef(1))
evaluation:
+--------+-----------------------+-------------+---------+
|        | a                     | b           | Output  |
+--------+-----------------------+-------------+---------+
| Type   | String                | String      | String  |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown |
| Row 0  | "aabbaa"              | "a"         | "ab"    |
| Row 1  | "bbccbb"              | "b"         | "aba"   |
| Row 2  | "ccddcc"              | "c"         | "aba"   |
+--------+-----------------------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [97, 98, 97, 98, 97, 97, 98, 97], offsets: [0, 2, 5, 8] })                                             |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim_both('aaabbaaa', 'a')
raw expr       : trim_both("aaabbaaa", "a")
checked expr   : trim_both<String, String>("aaabbaaa", "a")
optimized expr : "bb"
output type    : String
output domain  : Unknown
output         : "bb"


ast            : trim_both('aaabbaaa', 'aa')
raw expr       : trim_both("aaabbaaa", "aa")
checked expr   : trim_both<String, String>("aaabbaaa", "aa")
optimized expr : "abba"
output type    : String
output domain  : Unknown
output         : "abba"


ast            : trim_both('aaaaaaaa', 'a')
raw expr       : trim_both("aaaaaaaa", "a")
checked expr   : trim_both<String, String>("aaaaaaaa", "a")
optimized expr : ""
output type    : String
output domain  : Unknown
output         : ""


ast            : trim_both('aaabbaaa', 'b')
raw expr       : trim_both("aaabbaaa", "b")
checked expr   : trim_both<String, String>("aaabbaaa", "b")
optimized expr : "aaabbaaa"
output type    : String
output domain  : Unknown
output         : "aaabbaaa"


ast            : trim_both(NULL, 'a')
raw expr       : trim_both(NULL, "a")
checked expr   : trim_both<NULL, String NULL>(NULL, CAST("a" AS String NULL))
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : trim_both('aaaaaaaa', NULL)
raw expr       : trim_both("aaaaaaaa", NULL)
checked expr   : trim_both<String NULL, NULL>(CAST("aaaaaaaa" AS String NULL), NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : trim_both(a, 'a')
raw expr       : trim_both(ColumnRef(0)::String, "a")
checked expr   : trim_both<String, String>(ColumnRef(0), "a")
evaluation:
+--------+-----------------------+-------------+----------+
|        | a                     | b           | Output   |
+--------+-----------------------+-------------+----------+
| Type   | String                | String      | String   |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown  |
| Row 0  | "aabbaa"              | "a"         | "bb"     |
| Row 1  | "bbccbb"              | "b"         | "bbccbb" |
| Row 2  | "ccddcc"              | "c"         | "ccddcc" |
+--------+-----------------------+-------------+----------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [98, 98, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 2, 8, 14] })                  |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim_both(a, b)
raw expr       : trim_both(ColumnRef(0)::String, ColumnRef(1)::String)
checked expr   : trim_both<String, String>(ColumnRef(0), ColumnRef(1))
evaluation:
+--------+-----------------------+-------------+---------+
|        | a                     | b           | Output  |
+--------+-----------------------+-------------+---------+
| Type   | String                | String      | String  |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown |
| Row 0  | "aabbaa"              | "a"         | "bb"    |
| Row 1  | "bbccbb"              | "b"         | "cc"    |
| Row 2  | "ccddcc"              | "c"         | "dd"    |
+--------+-----------------------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [98, 98, 99, 99, 100, 100], offsets: [0, 2, 4, 6] })                                                   |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim_both('aba', b)
raw expr       : trim_both("aba", ColumnRef(1)::String)
checked expr   : trim_both<String, String>("aba", ColumnRef(1))
evaluation:
+--------+-----------------------+-------------+---------+
|        | a                     | b           | Output  |
+--------+-----------------------+-------------+---------+
| Type   | String                | String      | String  |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown |
| Row 0  | "aabbaa"              | "a"         | "b"     |
| Row 1  | "bbccbb"              | "b"         | "aba"   |
| Row 2  | "ccddcc"              | "c"         | "aba"   |
+--------+-----------------------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [98, 97, 98, 97, 97, 98, 97], offsets: [0, 1, 4, 7] })                                                 |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim('   abc   ')
raw expr       : trim("   abc   ")
checked expr   : trim<String>("   abc   ")
optimized expr : "abc"
output type    : String
output domain  : Unknown
output         : "abc"


ast            : trim('  ')
raw expr       : trim("  ")
checked expr   : trim<String>("  ")
optimized expr : ""
output type    : String
output domain  : Unknown
output         : ""


ast            : trim(NULL)
raw expr       : trim(NULL)
checked expr   : trim<NULL>(NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : trim(a)
raw expr       : trim(ColumnRef(0)::String)
checked expr   : trim<String>(ColumnRef(0))
evaluation:
+--------+-----------------------+---------+
|        | a                     | Output  |
+--------+-----------------------+---------+
| Type   | String                | String  |
| Domain | {"   abc"..="abc   "} | Unknown |
| Row 0  | "abc"                 | "abc"   |
| Row 1  | "   abc"              | "abc"   |
| Row 2  | "   abc   "           | "abc"   |
| Row 3  | "abc   "              | "abc"   |
+--------+-----------------------+---------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                        |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 98, 99, 32, 32, 32, 97, 98, 99, 32, 32, 32, 97, 98, 99, 32, 32, 32, 97, 98, 99, 32, 32, 32], offsets: [0, 3, 9, 18, 24] }) |
| Output | String(StringColumn { data: [97, 98, 99, 97, 98, 99, 97, 98, 99, 97, 98, 99], offsets: [0, 3, 6, 9, 12] })                                                  |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim(both 'a' from 'aaabbaaa')
raw expr       : trim_both("aaabbaaa", "a")
checked expr   : trim_both<String, String>("aaabbaaa", "a")
optimized expr : "bb"
output type    : String
output domain  : Unknown
output         : "bb"


ast            : trim(both 'aa' from 'aaabbaaa')
raw expr       : trim_both("aaabbaaa", "aa")
checked expr   : trim_both<String, String>("aaabbaaa", "aa")
optimized expr : "abba"
output type    : String
output domain  : Unknown
output         : "abba"


ast            : trim(both 'a' from 'aaaaaaaa')
raw expr       : trim_both("aaaaaaaa", "a")
checked expr   : trim_both<String, String>("aaaaaaaa", "a")
optimized expr : ""
output type    : String
output domain  : Unknown
output         : ""


ast            : trim(both 'b' from 'aaabbaaa')
raw expr       : trim_both("aaabbaaa", "b")
checked expr   : trim_both<String, String>("aaabbaaa", "b")
optimized expr : "aaabbaaa"
output type    : String
output domain  : Unknown
output         : "aaabbaaa"


ast            : trim(both 'a' from NULL)
raw expr       : trim_both(NULL, "a")
checked expr   : trim_both<NULL, String NULL>(NULL, CAST("a" AS String NULL))
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : trim(both NULL from 'aaaaaaaa')
raw expr       : trim_both("aaaaaaaa", NULL)
checked expr   : trim_both<String NULL, NULL>(CAST("aaaaaaaa" AS String NULL), NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : trim(both 'a' from a)
raw expr       : trim_both(ColumnRef(0)::String, "a")
checked expr   : trim_both<String, String>(ColumnRef(0), "a")
evaluation:
+--------+-----------------------+-------------+----------+
|        | a                     | b           | Output   |
+--------+-----------------------+-------------+----------+
| Type   | String                | String      | String   |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown  |
| Row 0  | "aabbaa"              | "a"         | "bb"     |
| Row 1  | "bbccbb"              | "b"         | "bbccbb" |
| Row 2  | "ccddcc"              | "c"         | "ccddcc" |
+--------+-----------------------+-------------+----------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [98, 98, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 2, 8, 14] })                  |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim(both b from a)
raw expr       : trim_both(ColumnRef(0)::String, ColumnRef(1)::String)
checked expr   : trim_both<String, String>(ColumnRef(0), ColumnRef(1))
evaluation:
+--------+-----------------------+-------------+---------+
|        | a                     | b           | Output  |
+--------+-----------------------+-------------+---------+
| Type   | String                | String      | String  |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown |
| Row 0  | "aabbaa"              | "a"         | "bb"    |
| Row 1  | "bbccbb"              | "b"         | "cc"    |
| Row 2  | "ccddcc"              | "c"         | "dd"    |
+--------+-----------------------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [98, 98, 99, 99, 100, 100], offsets: [0, 2, 4, 6] })                                                   |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim(both a from a)
raw expr       : trim_both(ColumnRef(0)::String, ColumnRef(0)::String)
checked expr   : trim_both<String, String>(ColumnRef(0), ColumnRef(0))
evaluation:
+--------+-----------------------+-------------+---------+
|        | a                     | b           | Output  |
+--------+-----------------------+-------------+---------+
| Type   | String                | String      | String  |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown |
| Row 0  | "aabbaa"              | "a"         | ""      |
| Row 1  | "bbccbb"              | "b"         | ""      |
| Row 2  | "ccddcc"              | "c"         | ""      |
+--------+-----------------------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [], offsets: [0, 0, 0, 0] })                                                                           |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim(both b from 'aba')
raw expr       : trim_both("aba", ColumnRef(1)::String)
checked expr   : trim_both<String, String>("aba", ColumnRef(1))
evaluation:
+--------+-----------------------+-------------+---------+
|        | a                     | b           | Output  |
+--------+-----------------------+-------------+---------+
| Type   | String                | String      | String  |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown |
| Row 0  | "aabbaa"              | "a"         | "b"     |
| Row 1  | "bbccbb"              | "b"         | "aba"   |
| Row 2  | "ccddcc"              | "c"         | "aba"   |
+--------+-----------------------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [98, 97, 98, 97, 97, 98, 97], offsets: [0, 1, 4, 7] })                                                 |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim(leading 'a' from 'aaabbaaa')
raw expr       : trim_leading("aaabbaaa", "a")
checked expr   : trim_leading<String, String>("aaabbaaa", "a")
optimized expr : "bbaaa"
output type    : String
output domain  : Unknown
output         : "bbaaa"


ast            : trim(leading 'aa' from 'aaabbaaa')
raw expr       : trim_leading("aaabbaaa", "aa")
checked expr   : trim_leading<String, String>("aaabbaaa", "aa")
optimized expr : "abbaaa"
output type    : String
output domain  : Unknown
output         : "abbaaa"


ast            : trim(leading 'a' from 'aaaaaaaa')
raw expr       : trim_leading("aaaaaaaa", "a")
checked expr   : trim_leading<String, String>("aaaaaaaa", "a")
optimized expr : ""
output type    : String
output domain  : Unknown
output         : ""


ast            : trim(leading 'b' from 'aaabbaaa')
raw expr       : trim_leading("aaabbaaa", "b")
checked expr   : trim_leading<String, String>("aaabbaaa", "b")
optimized expr : "aaabbaaa"
output type    : String
output domain  : Unknown
output         : "aaabbaaa"


ast            : trim(leading 'a' from NULL)
raw expr       : trim_leading(NULL, "a")
checked expr   : trim_leading<NULL, String NULL>(NULL, CAST("a" AS String NULL))
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : trim(leading NULL from 'aaaaaaaa')
raw expr       : trim_leading("aaaaaaaa", NULL)
checked expr   : trim_leading<String NULL, NULL>(CAST("aaaaaaaa" AS String NULL), NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : trim(leading 'a' from a)
raw expr       : trim_leading(ColumnRef(0)::String, "a")
checked expr   : trim_leading<String, String>(ColumnRef(0), "a")
evaluation:
+--------+-----------------------+-------------+----------+
|        | a                     | b           | Output   |
+--------+-----------------------+-------------+----------+
| Type   | String                | String      | String   |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown  |
| Row 0  | "aabbaa"              | "a"         | "bbaa"   |
| Row 1  | "bbccbb"              | "b"         | "bbccbb" |
| Row 2  | "ccddcc"              | "c"         | "ccddcc" |
+--------+-----------------------+-------------+----------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 4, 10, 16] })         |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim(leading b from a)
raw expr       : trim_leading(ColumnRef(0)::String, ColumnRef(1)::String)
checked expr   : trim_leading<String, String>(ColumnRef(0), ColumnRef(1))
evaluation:
+--------+-----------------------+-------------+---------+
|        | a                     | b           | Output  |
+--------+-----------------------+-------------+---------+
| Type   | String                | String      | String  |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown |
| Row 0  | "aabbaa"              | "a"         | "bbaa"  |
| Row 1  | "bbccbb"              | "b"         | "ccbb"  |
| Row 2  | "ccddcc"              | "c"         | "ddcc"  |
+--------+-----------------------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [98, 98, 97, 97, 99, 99, 98, 98, 100, 100, 99, 99], offsets: [0, 4, 8, 12] })                          |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim(leading a from a)
raw expr       : trim_leading(ColumnRef(0)::String, ColumnRef(0)::String)
checked expr   : trim_leading<String, String>(ColumnRef(0), ColumnRef(0))
evaluation:
+--------+-----------------------+-------------+---------+
|        | a                     | b           | Output  |
+--------+-----------------------+-------------+---------+
| Type   | String                | String      | String  |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown |
| Row 0  | "aabbaa"              | "a"         | ""      |
| Row 1  | "bbccbb"              | "b"         | ""      |
| Row 2  | "ccddcc"              | "c"         | ""      |
+--------+-----------------------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [], offsets: [0, 0, 0, 0] })                                                                           |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim(leading b from 'aba')
raw expr       : trim_leading("aba", ColumnRef(1)::String)
checked expr   : trim_leading<String, String>("aba", ColumnRef(1))
evaluation:
+--------+-----------------------+-------------+---------+
|        | a                     | b           | Output  |
+--------+-----------------------+-------------+---------+
| Type   | String                | String      | String  |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown |
| Row 0  | "aabbaa"              | "a"         | "ba"    |
| Row 1  | "bbccbb"              | "b"         | "aba"   |
| Row 2  | "ccddcc"              | "c"         | "aba"   |
+--------+-----------------------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [98, 97, 97, 98, 97, 97, 98, 97], offsets: [0, 2, 5, 8] })                                             |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim(trailing 'a' from 'aaabbaaa')
raw expr       : trim_trailing("aaabbaaa", "a")
checked expr   : trim_trailing<String, String>("aaabbaaa", "a")
optimized expr : "aaabb"
output type    : String
output domain  : Unknown
output         : "aaabb"


ast            : trim(trailing 'aa' from 'aaabbaaa')
raw expr       : trim_trailing("aaabbaaa", "aa")
checked expr   : trim_trailing<String, String>("aaabbaaa", "aa")
optimized expr : "aaabba"
output type    : String
output domain  : Unknown
output         : "aaabba"


ast            : trim(trailing 'a' from 'aaaaaaaa')
raw expr       : trim_trailing("aaaaaaaa", "a")
checked expr   : trim_trailing<String, String>("aaaaaaaa", "a")
optimized expr : ""
output type    : String
output domain  : Unknown
output         : ""


ast            : trim(trailing 'b' from 'aaabbaaa')
raw expr       : trim_trailing("aaabbaaa", "b")
checked expr   : trim_trailing<String, String>("aaabbaaa", "b")
optimized expr : "aaabbaaa"
output type    : String
output domain  : Unknown
output         : "aaabbaaa"


ast            : trim(trailing 'a' from NULL)
raw expr       : trim_trailing(NULL, "a")
checked expr   : trim_trailing<NULL, String NULL>(NULL, CAST("a" AS String NULL))
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : trim(trailing NULL from 'aaaaaaaa')
raw expr       : trim_trailing("aaaaaaaa", NULL)
checked expr   : trim_trailing<String NULL, NULL>(CAST("aaaaaaaa" AS String NULL), NULL)
optimized expr : NULL
output type    : NULL
output domain  : {NULL}
output         : NULL


ast            : trim(trailing 'a' from a)
raw expr       : trim_trailing(ColumnRef(0)::String, "a")
checked expr   : trim_trailing<String, String>(ColumnRef(0), "a")
evaluation:
+--------+-----------------------+-------------+----------+
|        | a                     | b           | Output   |
+--------+-----------------------+-------------+----------+
| Type   | String                | String      | String   |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown  |
| Row 0  | "aabbaa"              | "a"         | "aabb"   |
| Row 1  | "bbccbb"              | "b"         | "bbccbb" |
| Row 2  | "ccddcc"              | "c"         | "ccddcc" |
+--------+-----------------------+-------------+----------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [97, 97, 98, 98, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 4, 10, 16] })         |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim(trailing b from a)
raw expr       : trim_trailing(ColumnRef(0)::String, ColumnRef(1)::String)
checked expr   : trim_trailing<String, String>(ColumnRef(0), ColumnRef(1))
evaluation:
+--------+-----------------------+-------------+---------+
|        | a                     | b           | Output  |
+--------+-----------------------+-------------+---------+
| Type   | String                | String      | String  |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown |
| Row 0  | "aabbaa"              | "a"         | "aabb"  |
| Row 1  | "bbccbb"              | "b"         | "bbcc"  |
| Row 2  | "ccddcc"              | "c"         | "ccdd"  |
+--------+-----------------------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [97, 97, 98, 98, 98, 98, 99, 99, 99, 99, 100, 100], offsets: [0, 4, 8, 12] })                          |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim(trailing a from a)
raw expr       : trim_trailing(ColumnRef(0)::String, ColumnRef(0)::String)
checked expr   : trim_trailing<String, String>(ColumnRef(0), ColumnRef(0))
evaluation:
+--------+-----------------------+-------------+---------+
|        | a                     | b           | Output  |
+--------+-----------------------+-------------+---------+
| Type   | String                | String      | String  |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown |
| Row 0  | "aabbaa"              | "a"         | ""      |
| Row 1  | "bbccbb"              | "b"         | ""      |
| Row 2  | "ccddcc"              | "c"         | ""      |
+--------+-----------------------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [], offsets: [0, 0, 0, 0] })                                                                           |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : trim(trailing b from 'aba')
raw expr       : trim_trailing("aba", ColumnRef(1)::String)
checked expr   : trim_trailing<String, String>("aba", ColumnRef(1))
evaluation:
+--------+-----------------------+-------------+---------+
|        | a                     | b           | Output  |
+--------+-----------------------+-------------+---------+
| Type   | String                | String      | String  |
| Domain | {"aabbaa"..="ccddcc"} | {"a"..="c"} | Unknown |
| Row 0  | "aabbaa"              | "a"         | "ab"    |
| Row 1  | "bbccbb"              | "b"         | "aba"   |
| Row 2  | "ccddcc"              | "c"         | "aba"   |
+--------+-----------------------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                               |
+--------+------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 97, 98, 98, 97, 97, 98, 98, 99, 99, 98, 98, 99, 99, 100, 100, 99, 99], offsets: [0, 6, 12, 18] }) |
| b      | String(StringColumn { data: [97, 98, 99], offsets: [0, 1, 2, 3] })                                                                 |
| Output | String(StringColumn { data: [97, 98, 97, 98, 97, 97, 98, 97], offsets: [0, 2, 5, 8] })                                             |
+--------+------------------------------------------------------------------------------------------------------------------------------------+


ast            : concat('5', '3', '4')
raw expr       : concat("5", "3", "4")
checked expr   : concat<String, String, String>("5", "3", "4")
optimized expr : "534"
output type    : String
output domain  : {"5"..}
output         : "534"


ast            : concat(NULL, '3', '4')
raw expr       : concat(NULL, "3", "4")
checked expr   : concat<String NULL, String NULL, String NULL>(CAST(NULL AS String NULL), CAST("3" AS String NULL), CAST("4" AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : Unknown
output         : NULL


ast            : concat(a, '3', '4', '5')
raw expr       : concat(ColumnRef(0)::String, "3", "4", "5")
checked expr   : concat<String, String, String, String>(ColumnRef(0), "3", "4", "5")
evaluation:
+--------+-----------------------+----------------+
|        | a                     | Output         |
+--------+-----------------------+----------------+
| Type   | String                | String         |
| Domain | {"   abc"..="abc   "} | {"   abc"..}   |
| Row 0  | "abc"                 | "abc345"       |
| Row 1  | "   abc"              | "   abc345"    |
| Row 2  | "   abc   "           | "   abc   345" |
| Row 3  | "abc   "              | "abc   345"    |
+--------+-----------------------+----------------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                         |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [97, 98, 99, 32, 32, 32, 97, 98, 99, 32, 32, 32, 97, 98, 99, 32, 32, 32, 97, 98, 99, 32, 32, 32], offsets: [0, 3, 9, 18, 24] })                                                  |
| Output | String(StringColumn { data: [97, 98, 99, 51, 52, 53, 32, 32, 32, 97, 98, 99, 51, 52, 53, 32, 32, 32, 97, 98, 99, 32, 32, 32, 51, 52, 53, 97, 98, 99, 32, 32, 32, 51, 52, 53], offsets: [0, 6, 15, 27, 36] }) |
+--------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : concat(a, '3')
raw expr       : concat(ColumnRef(0)::String NULL, "3")
checked expr   : concat<String NULL, String NULL>(ColumnRef(0), CAST("3" AS String NULL))
optimized expr : concat<String NULL, String NULL>(ColumnRef(0), "3")
evaluation:
+--------+----------------------+-------------+
|        | a                    | Output      |
+--------+----------------------+-------------+
| Type   | String NULL          | String NULL |
| Domain | {"a"..="d"} ‚à™ {NULL} | Unknown     |
| Row 0  | "a"                  | "a3"        |
| Row 1  | "b"                  | "b3"        |
| Row 2  | NULL                 | NULL        |
| Row 3  | "d"                  | "d3"        |
+--------+----------------------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                    |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | Nullable(NullableColumn { column: String(StringColumn { data: [97, 98, 99, 100], offsets: [0, 1, 2, 3, 4] }), validity: [0b____1011] })                 |
| Output | Nullable(NullableColumn { column: String(StringColumn { data: [97, 51, 98, 51, 99, 51, 100, 51], offsets: [0, 2, 4, 6, 8] }), validity: [0b____1011] }) |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : concat_ws('-', '3', null, '4', null, '5')
raw expr       : concat_ws("-", "3", NULL, "4", NULL, "5")
checked expr   : concat_ws<String NULL, String NULL, String NULL, String NULL, String NULL, String NULL>(CAST("-" AS String NULL), CAST("3" AS String NULL), CAST(NULL AS String NULL), CAST("4" AS String NULL), CAST(NULL AS String NULL), CAST("5" AS String NULL))
optimized expr : "3-4-5"
output type    : String NULL
output domain  : Unknown
output         : "3-4-5"


ast            : concat_ws(NULL, '3', '4')
raw expr       : concat_ws(NULL, "3", "4")
checked expr   : concat_ws<String NULL, String NULL, String NULL>(CAST(NULL AS String NULL), CAST("3" AS String NULL), CAST("4" AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : Unknown
output         : NULL


ast            : concat_ws(a, '3', '4', '5')
raw expr       : concat_ws(ColumnRef(0)::String, "3", "4", "5")
checked expr   : concat_ws<String, String, String, String>(ColumnRef(0), "3", "4", "5")
evaluation:
+--------+-------------+---------+
|        | a           | Output  |
+--------+-------------+---------+
| Type   | String      | String  |
| Domain | {","..="-"} | {"3"..} |
| Row 0  | ","         | "3,4,5" |
| Row 1  | "-"         | "3-4-5" |
| Row 2  | ","         | "3,4,5" |
| Row 3  | "-"         | "3-4-5" |
+--------+-------------+---------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                         |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [44, 45, 44, 45], offsets: [0, 1, 2, 3, 4] })                                                                    |
| Output | String(StringColumn { data: [51, 44, 52, 44, 53, 51, 45, 52, 45, 53, 51, 44, 52, 44, 53, 51, 45, 52, 45, 53], offsets: [0, 5, 10, 15, 20] }) |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------+


ast            : concat_ws(a, '3')
raw expr       : concat_ws(ColumnRef(0)::String NULL, "3")
checked expr   : concat_ws<String NULL, String NULL>(ColumnRef(0), CAST("3" AS String NULL))
optimized expr : concat_ws<String NULL, String NULL>(ColumnRef(0), "3")
evaluation:
+--------+----------------------+-------------+
|        | a                    | Output      |
+--------+----------------------+-------------+
| Type   | String NULL          | String NULL |
| Domain | {"a"..="d"} ‚à™ {NULL} | Unknown     |
+--------+----------------------+-------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                    |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------+
| a      | Nullable(NullableColumn { column: String(StringColumn { data: [97, 98, 99, 100], offsets: [0, 1, 2, 3, 4] }), validity: [0b____1011] }) |
| Output | Nullable(NullableColumn { column: String(StringColumn { data: [], offsets: [0] }), validity: [] })                                      |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------+


ast            : bin(a)
raw expr       : bin(ColumnRef(0)::Int8)
checked expr   : bin<Int64>(CAST(ColumnRef(0) AS Int64))
evaluation:
+--------+----------+------------------+---------+-----------+----------------+-----------------+--------------------------------------------------------------------+
|        | a        | a2               | b       | c         | d              | e               | Output                                                             |
+--------+----------+------------------+---------+-----------+----------------+-----------------+--------------------------------------------------------------------+
| Type   | Int8     | UInt8 NULL       | Int16   | UInt32    | Float64        | String          | String                                                             |
| Domain | {-1..=3} | {1..=3} ‚à™ {NULL} | {2..=6} | {10..=30} | {-20.0..=30.0} | {"abc"..="def"} | Unknown                                                            |
| Row 0  | -1       | 1                | 2       | 10        | 10.0           | "abc"           | "1111111111111111111111111111111111111111111111111111111111111111" |
| Row 1  | 2        | 2                | 4       | 20        | -20.0          | "def"           | "10"                                                               |
| Row 2  | 3        | NULL             | 6       | 30        | 30.0           | "databend"      | "11"                                                               |
+--------+----------+------------------+---------+-----------+----------------+-----------------+--------------------------------------------------------------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                                                                                                                                                                                      |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | Int8([-1, 2, 3])                                                                                                                                                                                                                                                                                                                          |
| a2     | Nullable(NullableColumn { column: UInt8([1, 2, 3]), validity: [0b_____011] })                                                                                                                                                                                                                                                             |
| b      | Int16([2, 4, 6])                                                                                                                                                                                                                                                                                                                          |
| c      | UInt32([10, 20, 30])                                                                                                                                                                                                                                                                                                                      |
| d      | Float64([10.0, -20.0, 30.0])                                                                                                                                                                                                                                                                                                              |
| e      | String(StringColumn { data: [97, 98, 99, 100, 101, 102, 100, 97, 116, 97, 98, 101, 110, 100], offsets: [0, 3, 6, 14] })                                                                                                                                                                                                                   |
| Output | String(StringColumn { data: [49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 48, 49, 49], offsets: [0, 64, 66, 68] }) |
+--------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : bin(a2)
raw expr       : bin(ColumnRef(1)::UInt8 NULL)
checked expr   : bin<Int64 NULL>(CAST(ColumnRef(1) AS Int64 NULL))
evaluation:
+--------+----------+------------------+---------+-----------+----------------+-----------------+-------------+
|        | a        | a2               | b       | c         | d              | e               | Output      |
+--------+----------+------------------+---------+-----------+----------------+-----------------+-------------+
| Type   | Int8     | UInt8 NULL       | Int16   | UInt32    | Float64        | String          | String NULL |
| Domain | {-1..=3} | {1..=3} ‚à™ {NULL} | {2..=6} | {10..=30} | {-20.0..=30.0} | {"abc"..="def"} | Unknown     |
| Row 0  | -1       | 1                | 2       | 10        | 10.0           | "abc"           | "1"         |
| Row 1  | 2        | 2                | 4       | 20        | -20.0          | "def"           | "10"        |
| Row 2  | 3        | NULL             | 6       | 30        | 30.0           | "databend"      | NULL        |
+--------+----------+------------------+---------+-----------+----------------+-----------------+-------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                    |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------+
| a      | Int8([-1, 2, 3])                                                                                                                        |
| a2     | Nullable(NullableColumn { column: UInt8([1, 2, 3]), validity: [0b_____011] })                                                           |
| b      | Int16([2, 4, 6])                                                                                                                        |
| c      | UInt32([10, 20, 30])                                                                                                                    |
| d      | Float64([10.0, -20.0, 30.0])                                                                                                            |
| e      | String(StringColumn { data: [97, 98, 99, 100, 101, 102, 100, 97, 116, 97, 98, 101, 110, 100], offsets: [0, 3, 6, 14] })                 |
| Output | Nullable(NullableColumn { column: String(StringColumn { data: [49, 49, 48, 49, 49], offsets: [0, 1, 3, 5] }), validity: [0b_____011] }) |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------+


ast            : bin(b)
raw expr       : bin(ColumnRef(2)::Int16)
checked expr   : bin<Int64>(CAST(ColumnRef(2) AS Int64))
evaluation:
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
|        | a        | a2               | b       | c         | d              | e               | Output  |
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
| Type   | Int8     | UInt8 NULL       | Int16   | UInt32    | Float64        | String          | String  |
| Domain | {-1..=3} | {1..=3} ‚à™ {NULL} | {2..=6} | {10..=30} | {-20.0..=30.0} | {"abc"..="def"} | Unknown |
| Row 0  | -1       | 1                | 2       | 10        | 10.0           | "abc"           | "10"    |
| Row 1  | 2        | 2                | 4       | 20        | -20.0          | "def"           | "100"   |
| Row 2  | 3        | NULL             | 6       | 30        | 30.0           | "databend"      | "110"   |
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                    |
+--------+-------------------------------------------------------------------------------------------------------------------------+
| a      | Int8([-1, 2, 3])                                                                                                        |
| a2     | Nullable(NullableColumn { column: UInt8([1, 2, 3]), validity: [0b_____011] })                                           |
| b      | Int16([2, 4, 6])                                                                                                        |
| c      | UInt32([10, 20, 30])                                                                                                    |
| d      | Float64([10.0, -20.0, 30.0])                                                                                            |
| e      | String(StringColumn { data: [97, 98, 99, 100, 101, 102, 100, 97, 116, 97, 98, 101, 110, 100], offsets: [0, 3, 6, 14] }) |
| Output | String(StringColumn { data: [49, 48, 49, 48, 48, 49, 49, 48], offsets: [0, 2, 5, 8] })                                  |
+--------+-------------------------------------------------------------------------------------------------------------------------+


ast            : bin(c)
raw expr       : bin(ColumnRef(3)::UInt32)
checked expr   : bin<Int64>(CAST(ColumnRef(3) AS Int64))
evaluation:
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
|        | a        | a2               | b       | c         | d              | e               | Output  |
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
| Type   | Int8     | UInt8 NULL       | Int16   | UInt32    | Float64        | String          | String  |
| Domain | {-1..=3} | {1..=3} ‚à™ {NULL} | {2..=6} | {10..=30} | {-20.0..=30.0} | {"abc"..="def"} | Unknown |
| Row 0  | -1       | 1                | 2       | 10        | 10.0           | "abc"           | "1010"  |
| Row 1  | 2        | 2                | 4       | 20        | -20.0          | "def"           | "10100" |
| Row 2  | 3        | NULL             | 6       | 30        | 30.0           | "databend"      | "11110" |
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                    |
+--------+-------------------------------------------------------------------------------------------------------------------------+
| a      | Int8([-1, 2, 3])                                                                                                        |
| a2     | Nullable(NullableColumn { column: UInt8([1, 2, 3]), validity: [0b_____011] })                                           |
| b      | Int16([2, 4, 6])                                                                                                        |
| c      | UInt32([10, 20, 30])                                                                                                    |
| d      | Float64([10.0, -20.0, 30.0])                                                                                            |
| e      | String(StringColumn { data: [97, 98, 99, 100, 101, 102, 100, 97, 116, 97, 98, 101, 110, 100], offsets: [0, 3, 6, 14] }) |
| Output | String(StringColumn { data: [49, 48, 49, 48, 49, 48, 49, 48, 48, 49, 49, 49, 49, 48], offsets: [0, 4, 9, 14] })         |
+--------+-------------------------------------------------------------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | bin(d)
  | ^^^^^^ no overload satisfies `bin(Float64)`

has tried possible overloads:
  bin(NULL) :: NULL               : unable to unify `Float64` with `NULL`
  bin(Int64) :: String            : unable to unify `Float64` with `Int64`
  bin(Int64 NULL) :: String NULL  : unable to unify `Float64` with `Int64`



error: 
  --> SQL:1:1
  |
1 | bin(e)
  | ^^^^^^ no overload satisfies `bin(String)`

has tried possible overloads:
  bin(NULL) :: NULL               : unable to unify `String` with `NULL`
  bin(Int64) :: String            : unable to unify `String` with `Int64`
  bin(Int64 NULL) :: String NULL  : unable to unify `String` with `Int64`



ast            : oct(a)
raw expr       : oct(ColumnRef(0)::Int8)
checked expr   : oct<Int64>(CAST(ColumnRef(0) AS Int64))
evaluation:
+--------+----------+------------------+---------+-----------+----------------+-----------------+--------------------------+
|        | a        | a2               | b       | c         | d              | e               | Output                   |
+--------+----------+------------------+---------+-----------+----------------+-----------------+--------------------------+
| Type   | Int8     | UInt8 NULL       | Int16   | UInt32    | Float64        | String          | String                   |
| Domain | {-1..=3} | {1..=3} ‚à™ {NULL} | {2..=6} | {10..=30} | {-20.0..=30.0} | {"abc"..="def"} | Unknown                  |
| Row 0  | -1       | 1                | 2       | 10        | 10.0           | "abc"           | "1777777777777777777777" |
| Row 1  | 2        | 2                | 4       | 20        | -20.0          | "def"           | "2"                      |
| Row 2  | 3        | NULL             | 6       | 30        | 30.0           | "databend"      | "3"                      |
+--------+----------+------------------+---------+-----------+----------------+-----------------+--------------------------+
evaluation (internal):
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                      |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | Int8([-1, 2, 3])                                                                                                                                          |
| a2     | Nullable(NullableColumn { column: UInt8([1, 2, 3]), validity: [0b_____011] })                                                                             |
| b      | Int16([2, 4, 6])                                                                                                                                          |
| c      | UInt32([10, 20, 30])                                                                                                                                      |
| d      | Float64([10.0, -20.0, 30.0])                                                                                                                              |
| e      | String(StringColumn { data: [97, 98, 99, 100, 101, 102, 100, 97, 116, 97, 98, 101, 110, 100], offsets: [0, 3, 6, 14] })                                   |
| Output | String(StringColumn { data: [49, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 50, 51], offsets: [0, 22, 23, 24] }) |
+--------+-----------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : oct(a2)
raw expr       : oct(ColumnRef(1)::UInt8 NULL)
checked expr   : oct<Int64 NULL>(CAST(ColumnRef(1) AS Int64 NULL))
evaluation:
+--------+----------+------------------+---------+-----------+----------------+-----------------+-------------+
|        | a        | a2               | b       | c         | d              | e               | Output      |
+--------+----------+------------------+---------+-----------+----------------+-----------------+-------------+
| Type   | Int8     | UInt8 NULL       | Int16   | UInt32    | Float64        | String          | String NULL |
| Domain | {-1..=3} | {1..=3} ‚à™ {NULL} | {2..=6} | {10..=30} | {-20.0..=30.0} | {"abc"..="def"} | Unknown     |
| Row 0  | -1       | 1                | 2       | 10        | 10.0           | "abc"           | "1"         |
| Row 1  | 2        | 2                | 4       | 20        | -20.0          | "def"           | "2"         |
| Row 2  | 3        | NULL             | 6       | 30        | 30.0           | "databend"      | NULL        |
+--------+----------+------------------+---------+-----------+----------------+-----------------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                            |
+--------+---------------------------------------------------------------------------------------------------------------------------------+
| a      | Int8([-1, 2, 3])                                                                                                                |
| a2     | Nullable(NullableColumn { column: UInt8([1, 2, 3]), validity: [0b_____011] })                                                   |
| b      | Int16([2, 4, 6])                                                                                                                |
| c      | UInt32([10, 20, 30])                                                                                                            |
| d      | Float64([10.0, -20.0, 30.0])                                                                                                    |
| e      | String(StringColumn { data: [97, 98, 99, 100, 101, 102, 100, 97, 116, 97, 98, 101, 110, 100], offsets: [0, 3, 6, 14] })         |
| Output | Nullable(NullableColumn { column: String(StringColumn { data: [49, 50, 51], offsets: [0, 1, 2, 3] }), validity: [0b_____011] }) |
+--------+---------------------------------------------------------------------------------------------------------------------------------+


ast            : oct(b)
raw expr       : oct(ColumnRef(2)::Int16)
checked expr   : oct<Int64>(CAST(ColumnRef(2) AS Int64))
evaluation:
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
|        | a        | a2               | b       | c         | d              | e               | Output  |
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
| Type   | Int8     | UInt8 NULL       | Int16   | UInt32    | Float64        | String          | String  |
| Domain | {-1..=3} | {1..=3} ‚à™ {NULL} | {2..=6} | {10..=30} | {-20.0..=30.0} | {"abc"..="def"} | Unknown |
| Row 0  | -1       | 1                | 2       | 10        | 10.0           | "abc"           | "2"     |
| Row 1  | 2        | 2                | 4       | 20        | -20.0          | "def"           | "4"     |
| Row 2  | 3        | NULL             | 6       | 30        | 30.0           | "databend"      | "6"     |
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                    |
+--------+-------------------------------------------------------------------------------------------------------------------------+
| a      | Int8([-1, 2, 3])                                                                                                        |
| a2     | Nullable(NullableColumn { column: UInt8([1, 2, 3]), validity: [0b_____011] })                                           |
| b      | Int16([2, 4, 6])                                                                                                        |
| c      | UInt32([10, 20, 30])                                                                                                    |
| d      | Float64([10.0, -20.0, 30.0])                                                                                            |
| e      | String(StringColumn { data: [97, 98, 99, 100, 101, 102, 100, 97, 116, 97, 98, 101, 110, 100], offsets: [0, 3, 6, 14] }) |
| Output | String(StringColumn { data: [50, 52, 54], offsets: [0, 1, 2, 3] })                                                      |
+--------+-------------------------------------------------------------------------------------------------------------------------+


ast            : oct(c)
raw expr       : oct(ColumnRef(3)::UInt32)
checked expr   : oct<Int64>(CAST(ColumnRef(3) AS Int64))
evaluation:
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
|        | a        | a2               | b       | c         | d              | e               | Output  |
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
| Type   | Int8     | UInt8 NULL       | Int16   | UInt32    | Float64        | String          | String  |
| Domain | {-1..=3} | {1..=3} ‚à™ {NULL} | {2..=6} | {10..=30} | {-20.0..=30.0} | {"abc"..="def"} | Unknown |
| Row 0  | -1       | 1                | 2       | 10        | 10.0           | "abc"           | "12"    |
| Row 1  | 2        | 2                | 4       | 20        | -20.0          | "def"           | "24"    |
| Row 2  | 3        | NULL             | 6       | 30        | 30.0           | "databend"      | "36"    |
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                    |
+--------+-------------------------------------------------------------------------------------------------------------------------+
| a      | Int8([-1, 2, 3])                                                                                                        |
| a2     | Nullable(NullableColumn { column: UInt8([1, 2, 3]), validity: [0b_____011] })                                           |
| b      | Int16([2, 4, 6])                                                                                                        |
| c      | UInt32([10, 20, 30])                                                                                                    |
| d      | Float64([10.0, -20.0, 30.0])                                                                                            |
| e      | String(StringColumn { data: [97, 98, 99, 100, 101, 102, 100, 97, 116, 97, 98, 101, 110, 100], offsets: [0, 3, 6, 14] }) |
| Output | String(StringColumn { data: [49, 50, 50, 52, 51, 54], offsets: [0, 2, 4, 6] })                                          |
+--------+-------------------------------------------------------------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | oct(d)
  | ^^^^^^ no overload satisfies `oct(Float64)`

has tried possible overloads:
  oct(NULL) :: NULL               : unable to unify `Float64` with `NULL`
  oct(Int64) :: String            : unable to unify `Float64` with `Int64`
  oct(Int64 NULL) :: String NULL  : unable to unify `Float64` with `Int64`



error: 
  --> SQL:1:1
  |
1 | oct(e)
  | ^^^^^^ no overload satisfies `oct(String)`

has tried possible overloads:
  oct(NULL) :: NULL               : unable to unify `String` with `NULL`
  oct(Int64) :: String            : unable to unify `String` with `Int64`
  oct(Int64 NULL) :: String NULL  : unable to unify `String` with `Int64`



ast            : hex(a)
raw expr       : hex(ColumnRef(0)::Int8)
checked expr   : hex<Int64>(CAST(ColumnRef(0) AS Int64))
evaluation:
+--------+----------+------------------+---------+-----------+----------------+-----------------+--------------------+
|        | a        | a2               | b       | c         | d              | e               | Output             |
+--------+----------+------------------+---------+-----------+----------------+-----------------+--------------------+
| Type   | Int8     | UInt8 NULL       | Int16   | UInt32    | Float64        | String          | String             |
| Domain | {-1..=3} | {1..=3} ‚à™ {NULL} | {2..=6} | {10..=30} | {-20.0..=30.0} | {"abc"..="def"} | Unknown            |
| Row 0  | -1       | 1                | 2       | 10        | 10.0           | "abc"           | "ffffffffffffffff" |
| Row 1  | 2        | 2                | 4       | 20        | -20.0          | "def"           | "2"                |
| Row 2  | 3        | NULL             | 6       | 30        | 30.0           | "databend"      | "3"                |
+--------+----------+------------------+---------+-----------+----------------+-----------------+--------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                              |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | Int8([-1, 2, 3])                                                                                                                                  |
| a2     | Nullable(NullableColumn { column: UInt8([1, 2, 3]), validity: [0b_____011] })                                                                     |
| b      | Int16([2, 4, 6])                                                                                                                                  |
| c      | UInt32([10, 20, 30])                                                                                                                              |
| d      | Float64([10.0, -20.0, 30.0])                                                                                                                      |
| e      | String(StringColumn { data: [97, 98, 99, 100, 101, 102, 100, 97, 116, 97, 98, 101, 110, 100], offsets: [0, 3, 6, 14] })                           |
| Output | String(StringColumn { data: [102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 50, 51], offsets: [0, 16, 17, 18] }) |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : hex(a2)
raw expr       : hex(ColumnRef(1)::UInt8 NULL)
checked expr   : hex<Int64 NULL>(CAST(ColumnRef(1) AS Int64 NULL))
evaluation:
+--------+----------+------------------+---------+-----------+----------------+-----------------+-------------+
|        | a        | a2               | b       | c         | d              | e               | Output      |
+--------+----------+------------------+---------+-----------+----------------+-----------------+-------------+
| Type   | Int8     | UInt8 NULL       | Int16   | UInt32    | Float64        | String          | String NULL |
| Domain | {-1..=3} | {1..=3} ‚à™ {NULL} | {2..=6} | {10..=30} | {-20.0..=30.0} | {"abc"..="def"} | Unknown     |
| Row 0  | -1       | 1                | 2       | 10        | 10.0           | "abc"           | "1"         |
| Row 1  | 2        | 2                | 4       | 20        | -20.0          | "def"           | "2"         |
| Row 2  | 3        | NULL             | 6       | 30        | 30.0           | "databend"      | NULL        |
+--------+----------+------------------+---------+-----------+----------------+-----------------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                            |
+--------+---------------------------------------------------------------------------------------------------------------------------------+
| a      | Int8([-1, 2, 3])                                                                                                                |
| a2     | Nullable(NullableColumn { column: UInt8([1, 2, 3]), validity: [0b_____011] })                                                   |
| b      | Int16([2, 4, 6])                                                                                                                |
| c      | UInt32([10, 20, 30])                                                                                                            |
| d      | Float64([10.0, -20.0, 30.0])                                                                                                    |
| e      | String(StringColumn { data: [97, 98, 99, 100, 101, 102, 100, 97, 116, 97, 98, 101, 110, 100], offsets: [0, 3, 6, 14] })         |
| Output | Nullable(NullableColumn { column: String(StringColumn { data: [49, 50, 51], offsets: [0, 1, 2, 3] }), validity: [0b_____011] }) |
+--------+---------------------------------------------------------------------------------------------------------------------------------+


ast            : hex(b)
raw expr       : hex(ColumnRef(2)::Int16)
checked expr   : hex<Int64>(CAST(ColumnRef(2) AS Int64))
evaluation:
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
|        | a        | a2               | b       | c         | d              | e               | Output  |
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
| Type   | Int8     | UInt8 NULL       | Int16   | UInt32    | Float64        | String          | String  |
| Domain | {-1..=3} | {1..=3} ‚à™ {NULL} | {2..=6} | {10..=30} | {-20.0..=30.0} | {"abc"..="def"} | Unknown |
| Row 0  | -1       | 1                | 2       | 10        | 10.0           | "abc"           | "2"     |
| Row 1  | 2        | 2                | 4       | 20        | -20.0          | "def"           | "4"     |
| Row 2  | 3        | NULL             | 6       | 30        | 30.0           | "databend"      | "6"     |
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                    |
+--------+-------------------------------------------------------------------------------------------------------------------------+
| a      | Int8([-1, 2, 3])                                                                                                        |
| a2     | Nullable(NullableColumn { column: UInt8([1, 2, 3]), validity: [0b_____011] })                                           |
| b      | Int16([2, 4, 6])                                                                                                        |
| c      | UInt32([10, 20, 30])                                                                                                    |
| d      | Float64([10.0, -20.0, 30.0])                                                                                            |
| e      | String(StringColumn { data: [97, 98, 99, 100, 101, 102, 100, 97, 116, 97, 98, 101, 110, 100], offsets: [0, 3, 6, 14] }) |
| Output | String(StringColumn { data: [50, 52, 54], offsets: [0, 1, 2, 3] })                                                      |
+--------+-------------------------------------------------------------------------------------------------------------------------+


ast            : hex(c)
raw expr       : hex(ColumnRef(3)::UInt32)
checked expr   : hex<Int64>(CAST(ColumnRef(3) AS Int64))
evaluation:
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
|        | a        | a2               | b       | c         | d              | e               | Output  |
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
| Type   | Int8     | UInt8 NULL       | Int16   | UInt32    | Float64        | String          | String  |
| Domain | {-1..=3} | {1..=3} ‚à™ {NULL} | {2..=6} | {10..=30} | {-20.0..=30.0} | {"abc"..="def"} | Unknown |
| Row 0  | -1       | 1                | 2       | 10        | 10.0           | "abc"           | "a"     |
| Row 1  | 2        | 2                | 4       | 20        | -20.0          | "def"           | "14"    |
| Row 2  | 3        | NULL             | 6       | 30        | 30.0           | "databend"      | "1e"    |
+--------+----------+------------------+---------+-----------+----------------+-----------------+---------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                    |
+--------+-------------------------------------------------------------------------------------------------------------------------+
| a      | Int8([-1, 2, 3])                                                                                                        |
| a2     | Nullable(NullableColumn { column: UInt8([1, 2, 3]), validity: [0b_____011] })                                           |
| b      | Int16([2, 4, 6])                                                                                                        |
| c      | UInt32([10, 20, 30])                                                                                                    |
| d      | Float64([10.0, -20.0, 30.0])                                                                                            |
| e      | String(StringColumn { data: [97, 98, 99, 100, 101, 102, 100, 97, 116, 97, 98, 101, 110, 100], offsets: [0, 3, 6, 14] }) |
| Output | String(StringColumn { data: [97, 49, 52, 49, 101], offsets: [0, 1, 3, 5] })                                             |
+--------+-------------------------------------------------------------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | hex(d)
  | ^^^^^^ no overload satisfies `hex(Float64)`

has tried possible overloads:
  hex(NULL) :: NULL                : unable to unify `Float64` with `NULL`
  hex(Int64) :: String             : unable to unify `Float64` with `Int64`
  hex(Int64 NULL) :: String NULL   : unable to unify `Float64` with `Int64`
  hex(NULL) :: NULL                : unable to unify `Float64` with `NULL`
  hex(String) :: String            : unable to unify `Float64` with `String`
  hex(String NULL) :: String NULL  : unable to unify `Float64` with `String`



ast            : hex(e)
raw expr       : hex(ColumnRef(5)::String)
checked expr   : hex<String>(ColumnRef(5))
evaluation:
+--------+----------+------------------+---------+-----------+----------------+-----------------+--------------------+
|        | a        | a2               | b       | c         | d              | e               | Output             |
+--------+----------+------------------+---------+-----------+----------------+-----------------+--------------------+
| Type   | Int8     | UInt8 NULL       | Int16   | UInt32    | Float64        | String          | String             |
| Domain | {-1..=3} | {1..=3} ‚à™ {NULL} | {2..=6} | {10..=30} | {-20.0..=30.0} | {"abc"..="def"} | Unknown            |
| Row 0  | -1       | 1                | 2       | 10        | 10.0           | "abc"           | "616263"           |
| Row 1  | 2        | 2                | 4       | 20        | -20.0          | "def"           | "646566"           |
| Row 2  | 3        | NULL             | 6       | 30        | 30.0           | "databend"      | "6461746162656e64" |
+--------+----------+------------------+---------+-----------+----------------+-----------------+--------------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                      |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | Int8([-1, 2, 3])                                                                                                                                                          |
| a2     | Nullable(NullableColumn { column: UInt8([1, 2, 3]), validity: [0b_____011] })                                                                                             |
| b      | Int16([2, 4, 6])                                                                                                                                                          |
| c      | UInt32([10, 20, 30])                                                                                                                                                      |
| d      | Float64([10.0, -20.0, 30.0])                                                                                                                                              |
| e      | String(StringColumn { data: [97, 98, 99, 100, 101, 102, 100, 97, 116, 97, 98, 101, 110, 100], offsets: [0, 3, 6, 14] })                                                   |
| Output | String(StringColumn { data: [54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 52, 54, 49, 55, 52, 54, 49, 54, 50, 54, 53, 54, 101, 54, 52], offsets: [0, 6, 12, 28] }) |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : unhex('6461746162656e64')
raw expr       : unhex("6461746162656e64")
checked expr   : unhex<String>("6461746162656e64")
optimized expr : "databend"
output type    : String
output domain  : Unknown
output         : "databend"


ast            : unhex(hex(s))
raw expr       : unhex(hex(ColumnRef(0)::String))
checked expr   : unhex<String>(hex<String>(ColumnRef(0)))
evaluation:
+--------+-----------------+------------+
|        | s               | Output     |
+--------+-----------------+------------+
| Type   | String          | String     |
| Domain | {"abc"..="def"} | Unknown    |
| Row 0  | "abc"           | "abc"      |
| Row 1  | "def"           | "def"      |
| Row 2  | "databend"      | "databend" |
+--------+-----------------+------------+
evaluation (internal):
+--------+-------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                    |
+--------+-------------------------------------------------------------------------------------------------------------------------+
| s      | String(StringColumn { data: [97, 98, 99, 100, 101, 102, 100, 97, 116, 97, 98, 101, 110, 100], offsets: [0, 3, 6, 14] }) |
| Output | String(StringColumn { data: [97, 98, 99, 100, 101, 102, 100, 97, 116, 97, 98, 101, 110, 100], offsets: [0, 3, 6, 14] }) |
+--------+-------------------------------------------------------------------------------------------------------------------------+


ast            : unhex(s)
raw expr       : unhex(ColumnRef(0)::String)
checked expr   : unhex<String>(ColumnRef(0))
evaluation:
+--------+-----------------------+------------+
|        | s                     | Output     |
+--------+-----------------------+------------+
| Type   | String                | String     |
| Domain | {"616263"..="646566"} | Unknown    |
| Row 0  | "616263"              | "abc"      |
| Row 1  | "646566"              | "def"      |
| Row 2  | "6461746162656e64"    | "databend" |
+--------+-----------------------+------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                      |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| s      | String(StringColumn { data: [54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 52, 54, 49, 55, 52, 54, 49, 54, 50, 54, 53, 54, 101, 54, 52], offsets: [0, 6, 12, 28] }) |
| Output | String(StringColumn { data: [97, 98, 99, 100, 101, 102, 100, 97, 116, 97, 98, 101, 110, 100], offsets: [0, 3, 6, 14] })                                                   |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : lpad('hi', 2, '?')
raw expr       : lpad("hi", 2_u8, "?")
checked expr   : lpad<String, UInt64, String>("hi", CAST(2_u8 AS UInt64), "?")
optimized expr : "hi"
output type    : String
output domain  : Unknown
output         : "hi"


ast            : lpad('hi', 4, '?')
raw expr       : lpad("hi", 4_u8, "?")
checked expr   : lpad<String, UInt64, String>("hi", CAST(4_u8 AS UInt64), "?")
optimized expr : "??hi"
output type    : String
output domain  : Unknown
output         : "??hi"


ast            : lpad('hi', 0, '?')
raw expr       : lpad("hi", 0_u8, "?")
checked expr   : lpad<String, UInt64, String>("hi", CAST(0_u8 AS UInt64), "?")
optimized expr : ""
output type    : String
output domain  : Unknown
output         : ""


ast            : lpad('hi', 1, '?')
raw expr       : lpad("hi", 1_u8, "?")
checked expr   : lpad<String, UInt64, String>("hi", CAST(1_u8 AS UInt64), "?")
optimized expr : "h"
output type    : String
output domain  : Unknown
output         : "h"


error: 
  --> SQL:1:1
  |
1 | lpad('hi', -1, '?')
  | ^^^^^^^^^^^^^^^^^^^ no overload satisfies `lpad(String, Int16, String)`

has tried possible overloads:
  lpad(NULL, UInt64 NULL, String NULL) :: NULL                : unable to unify `String` with `NULL`
  lpad(String NULL, NULL, String NULL) :: NULL                : unable to unify `Int16` with `NULL`
  lpad(String NULL, UInt64 NULL, NULL) :: NULL                : unable to unify `Int16` with `UInt64`
  lpad(String, UInt64, String) :: String                      : unable to unify `Int16` with `UInt64`
  lpad(String NULL, UInt64 NULL, String NULL) :: String NULL  : unable to unify `Int16` with `UInt64`



ast            : lpad(a, b, c)
raw expr       : lpad(ColumnRef(0)::String, ColumnRef(1)::UInt8, ColumnRef(2)::String)
checked expr   : lpad<String, UInt64, String>(ColumnRef(0), CAST(ColumnRef(1) AS UInt64), ColumnRef(2))
evaluation:
+--------+-----------------+---------+-------------+---------+
|        | a               | b       | c           | Output  |
+--------+-----------------+---------+-------------+---------+
| Type   | String          | UInt8   | String      | String  |
| Domain | {"cc"..="test"} | {0..=5} | {"?"..="x"} | Unknown |
| Row 0  | "hi"            | 0       | "?"         | ""      |
| Row 1  | "test"          | 3       | "x"         | "tes"   |
| Row 2  | "cc"            | 5       | "bb"        | "bbbcc" |
+--------+-----------------+---------+-------------+---------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------+
| Column | Data                                                                                         |
+--------+----------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [104, 105, 116, 101, 115, 116, 99, 99], offsets: [0, 2, 6, 8] }) |
| b      | Int32([0, 3, 5])                                                                             |
| c      | String(StringColumn { data: [63, 120, 98, 98], offsets: [0, 1, 2, 4] })                      |
| Output | String(StringColumn { data: [116, 101, 115, 98, 98, 98, 99, 99], offsets: [0, 0, 3, 8] })    |
+--------+----------------------------------------------------------------------------------------------+


ast            : rpad('hi', 2, '?')
raw expr       : rpad("hi", 2_u8, "?")
checked expr   : rpad<String, UInt64, String>("hi", CAST(2_u8 AS UInt64), "?")
optimized expr : "hi"
output type    : String
output domain  : Unknown
output         : "hi"


ast            : rpad('hi', 4, '?')
raw expr       : rpad("hi", 4_u8, "?")
checked expr   : rpad<String, UInt64, String>("hi", CAST(4_u8 AS UInt64), "?")
optimized expr : "hi??"
output type    : String
output domain  : Unknown
output         : "hi??"


ast            : rpad('hi', 0, '?')
raw expr       : rpad("hi", 0_u8, "?")
checked expr   : rpad<String, UInt64, String>("hi", CAST(0_u8 AS UInt64), "?")
optimized expr : ""
output type    : String
output domain  : Unknown
output         : ""


ast            : rpad('hi', 1, '?')
raw expr       : rpad("hi", 1_u8, "?")
checked expr   : rpad<String, UInt64, String>("hi", CAST(1_u8 AS UInt64), "?")
optimized expr : "h"
output type    : String
output domain  : Unknown
output         : "h"


error: 
  --> SQL:1:1
  |
1 | rpad('hi', -1, '?')
  | ^^^^^^^^^^^^^^^^^^^ no overload satisfies `rpad(String, Int16, String)`

has tried possible overloads:
  rpad(NULL, UInt64 NULL, String NULL) :: NULL                : unable to unify `String` with `NULL`
  rpad(String NULL, NULL, String NULL) :: NULL                : unable to unify `Int16` with `NULL`
  rpad(String NULL, UInt64 NULL, NULL) :: NULL                : unable to unify `Int16` with `UInt64`
  rpad(String, UInt64, String) :: String                      : unable to unify `Int16` with `UInt64`
  rpad(String NULL, UInt64 NULL, String NULL) :: String NULL  : unable to unify `Int16` with `UInt64`



ast            : rpad(a, b, c)
raw expr       : rpad(ColumnRef(0)::String, ColumnRef(1)::UInt8, ColumnRef(2)::String)
checked expr   : rpad<String, UInt64, String>(ColumnRef(0), CAST(ColumnRef(1) AS UInt64), ColumnRef(2))
evaluation:
+--------+-----------------+---------+-------------+---------+
|        | a               | b       | c           | Output  |
+--------+-----------------+---------+-------------+---------+
| Type   | String          | UInt8   | String      | String  |
| Domain | {"cc"..="test"} | {0..=5} | {"?"..="x"} | Unknown |
| Row 0  | "hi"            | 0       | "?"         | ""      |
| Row 1  | "test"          | 3       | "x"         | "tes"   |
| Row 2  | "cc"            | 5       | "bb"        | "ccbbb" |
+--------+-----------------+---------+-------------+---------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------+
| Column | Data                                                                                         |
+--------+----------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [104, 105, 116, 101, 115, 116, 99, 99], offsets: [0, 2, 6, 8] }) |
| b      | Int32([0, 3, 5])                                                                             |
| c      | String(StringColumn { data: [63, 120, 98, 98], offsets: [0, 1, 2, 4] })                      |
| Output | String(StringColumn { data: [116, 101, 115, 99, 99, 98, 98, 98], offsets: [0, 0, 3, 8] })    |
+--------+----------------------------------------------------------------------------------------------+


ast            : replace('hi', '', '?')
raw expr       : replace("hi", "", "?")
checked expr   : replace<String, String, String>("hi", "", "?")
optimized expr : "hi"
output type    : String
output domain  : Unknown
output         : "hi"


ast            : replace('hi', '', 'hi')
raw expr       : replace("hi", "", "hi")
checked expr   : replace<String, String, String>("hi", "", "hi")
optimized expr : "hi"
output type    : String
output domain  : Unknown
output         : "hi"


ast            : replace('hi', 'i', '?')
raw expr       : replace("hi", "i", "?")
checked expr   : replace<String, String, String>("hi", "i", "?")
optimized expr : "h?"
output type    : String
output domain  : Unknown
output         : "h?"


ast            : replace('hi', 'x', '?')
raw expr       : replace("hi", "x", "?")
checked expr   : replace<String, String, String>("hi", "x", "?")
optimized expr : "hi"
output type    : String
output domain  : Unknown
output         : "hi"


ast            : replace(a, b, c)
raw expr       : replace(ColumnRef(0)::String, ColumnRef(1)::String, ColumnRef(2)::String)
checked expr   : replace<String, String, String>(ColumnRef(0), ColumnRef(1), ColumnRef(2))
evaluation:
+--------+-----------------+-------------+-------------+---------+
|        | a               | b           | c           | Output  |
+--------+-----------------+-------------+-------------+---------+
| Type   | String          | String      | String      | String  |
| Domain | {"cc"..="test"} | {""..="te"} | {"?"..="x"} | Unknown |
| Row 0  | "hi"            | "i"         | "?"         | "h?"    |
| Row 1  | "test"          | "te"        | "x"         | "xst"   |
| Row 2  | "cc"            | "cc"        | "bb"        | "bb"    |
| Row 3  | "q"             | ""          | "q"         | "q"     |
+--------+-----------------+-------------+-------------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                 |
+--------+------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [104, 105, 116, 101, 115, 116, 99, 99, 113], offsets: [0, 2, 6, 8, 9] }) |
| b      | String(StringColumn { data: [105, 116, 101, 99, 99], offsets: [0, 1, 3, 5, 5] })                     |
| c      | String(StringColumn { data: [63, 120, 98, 98, 113], offsets: [0, 1, 2, 4, 5] })                      |
| Output | String(StringColumn { data: [104, 63, 120, 115, 116, 98, 98, 113], offsets: [0, 2, 5, 7, 8] })       |
+--------+------------------------------------------------------------------------------------------------------+


ast            : strcmp('text', 'text2')
raw expr       : strcmp("text", "text2")
checked expr   : strcmp<String, String>("text", "text2")
optimized expr : -1_i8
output type    : Int8
output domain  : Unknown
output         : -1


ast            : strcmp('text2', 'text')
raw expr       : strcmp("text2", "text")
checked expr   : strcmp<String, String>("text2", "text")
optimized expr : 1_i8
output type    : Int8
output domain  : Unknown
output         : 1


ast            : strcmp('hii', 'hii')
raw expr       : strcmp("hii", "hii")
checked expr   : strcmp<String, String>("hii", "hii")
optimized expr : 0_i8
output type    : Int8
output domain  : Unknown
output         : 0


ast            : strcmp(a, b)
raw expr       : strcmp(ColumnRef(0)::String, ColumnRef(1)::String)
checked expr   : strcmp<String, String>(ColumnRef(0), ColumnRef(1))
evaluation:
+--------+-----------------+------------------+---------+
|        | a               | b                | Output  |
+--------+-----------------+------------------+---------+
| Type   | String          | String           | Int8    |
| Domain | {"cc"..="test"} | {"ccb"..="test"} | Unknown |
| Row 0  | "hi"            | "i"              | 1       |
| Row 1  | "test"          | "test"           | 0       |
| Row 2  | "cc"            | "ccb"            | -1      |
+--------+-----------------+------------------+---------+
evaluation (internal):
+--------+----------------------------------------------------------------------------------------------+
| Column | Data                                                                                         |
+--------+----------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [104, 105, 116, 101, 115, 116, 99, 99], offsets: [0, 2, 6, 8] }) |
| b      | String(StringColumn { data: [105, 116, 101, 115, 116, 99, 99, 98], offsets: [0, 1, 5, 8] })  |
| Output | Int8([1, 0, -1])                                                                             |
+--------+----------------------------------------------------------------------------------------------+


error: 
  --> SQL:1:1
  |
1 | insert('Quadratic', 3, 4, 'What', 4)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no overload satisfies `insert(String, UInt8, UInt8, String, UInt8)`



error: 
  --> SQL:1:1
  |
1 | insert('Quadratic', 3, 4)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^ no overload satisfies `insert(String, UInt8, UInt8)`



ast            : insert('Quadratic', 3, 4, 'What')
raw expr       : insert("Quadratic", 3_u8, 4_u8, "What")
checked expr   : insert<String, Int64, Int64, String>("Quadratic", CAST(3_u8 AS Int64), CAST(4_u8 AS Int64), "What")
optimized expr : "QuWhattic"
output type    : String
output domain  : Unknown
output         : "QuWhattic"


ast            : insert('Quadratic', -1, 4, 'What')
raw expr       : insert("Quadratic", minus(1_u8), 4_u8, "What")
checked expr   : insert<String, Int64, Int64, String>("Quadratic", CAST(minus<UInt8>(1_u8) AS Int64), CAST(4_u8 AS Int64), "What")
optimized expr : "Quadratic"
output type    : String
output domain  : Unknown
output         : "Quadratic"


ast            : insert('Quadratic', 3, 100, 'What')
raw expr       : insert("Quadratic", 3_u8, 100_u8, "What")
checked expr   : insert<String, Int64, Int64, String>("Quadratic", CAST(3_u8 AS Int64), CAST(100_u8 AS Int64), "What")
optimized expr : "QuWhat"
output type    : String
output domain  : Unknown
output         : "QuWhat"


ast            : insert('Quadratic', 3, 100, NULL)
raw expr       : insert("Quadratic", 3_u8, 100_u8, NULL)
checked expr   : insert<String NULL, Int64 NULL, Int64 NULL, String NULL>(CAST("Quadratic" AS String NULL), CAST(3_u8 AS Int64 NULL), CAST(100_u8 AS Int64 NULL), CAST(NULL AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : Unknown
output         : NULL


ast            : insert('Quadratic', 3, NULL, 'NULL')
raw expr       : insert("Quadratic", 3_u8, NULL, "NULL")
checked expr   : insert<String NULL, Int64 NULL, Int64 NULL, String NULL>(CAST("Quadratic" AS String NULL), CAST(3_u8 AS Int64 NULL), CAST(NULL AS Int64 NULL), CAST("NULL" AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : Unknown
output         : NULL


ast            : insert('Quadratic', NULL, 100, 'NULL')
raw expr       : insert("Quadratic", NULL, 100_u8, "NULL")
checked expr   : insert<String NULL, Int64 NULL, Int64 NULL, String NULL>(CAST("Quadratic" AS String NULL), CAST(NULL AS Int64 NULL), CAST(100_u8 AS Int64 NULL), CAST("NULL" AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : Unknown
output         : NULL


ast            : insert(NULL, 2, 100, 'NULL')
raw expr       : insert(NULL, 2_u8, 100_u8, "NULL")
checked expr   : insert<String NULL, Int64 NULL, Int64 NULL, String NULL>(CAST(NULL AS String NULL), CAST(2_u8 AS Int64 NULL), CAST(100_u8 AS Int64 NULL), CAST("NULL" AS String NULL))
optimized expr : NULL
output type    : String NULL
output domain  : Unknown
output         : NULL


ast            : insert(a, b, c, d)
raw expr       : insert(ColumnRef(0)::String, ColumnRef(1)::UInt8, ColumnRef(2)::UInt8, ColumnRef(3)::String)
checked expr   : insert<String, Int64, Int64, String>(ColumnRef(0), CAST(ColumnRef(1) AS Int64), CAST(ColumnRef(2) AS Int64), ColumnRef(3))
evaluation:
+--------+-----------------+---------+---------+---------------+---------+
|        | a               | b       | c       | d             | Output  |
+--------+-----------------+---------+---------+---------------+---------+
| Type   | String          | UInt8   | UInt8   | String        | String  |
| Domain | {"cc"..="test"} | {1..=4} | {1..=5} | {"12"..="zc"} | Unknown |
| Row 0  | "hi"            | 1       | 3       | "xx"          | "xx"    |
| Row 1  | "test"          | 4       | 5       | "zc"          | "teszc" |
| Row 2  | "cc"            | 1       | 1       | "12"          | "12"    |
| Row 3  | "q"             | 1       | 1       | "56"          | "56"    |
+--------+-----------------+---------+---------+---------------+---------+
evaluation (internal):
+--------+--------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                         |
+--------+--------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [104, 105, 116, 101, 115, 116, 99, 99, 113], offsets: [0, 2, 6, 8, 9] })         |
| b      | Int32([1, 4, 1, 1])                                                                                          |
| c      | Int32([3, 5, 1, 1])                                                                                          |
| d      | String(StringColumn { data: [120, 120, 122, 99, 49, 50, 53, 54], offsets: [0, 2, 4, 6, 8] })                 |
| Output | String(StringColumn { data: [120, 120, 116, 101, 115, 122, 99, 49, 50, 53, 54], offsets: [0, 2, 7, 9, 11] }) |
+--------+--------------------------------------------------------------------------------------------------------------+


ast            : insert(x, y, z, u)
raw expr       : insert(ColumnRef(0)::String NULL, ColumnRef(1)::UInt8 NULL, ColumnRef(2)::UInt8 NULL, ColumnRef(3)::String NULL)
checked expr   : insert<String NULL, Int64 NULL, Int64 NULL, String NULL>(ColumnRef(0), CAST(ColumnRef(1) AS Int64 NULL), CAST(ColumnRef(2) AS Int64 NULL), ColumnRef(3))
evaluation:
+--------+--------------------------+------------------+------------------+------------------------+-------------+
|        | x                        | y                | z                | u                      | Output      |
+--------+--------------------------+------------------+------------------+------------------------+-------------+
| Type   | String NULL              | UInt8 NULL       | UInt8 NULL       | String NULL            | String NULL |
| Domain | {"cc"..="test"} ‚à™ {NULL} | {1..=4} ‚à™ {NULL} | {1..=5} ‚à™ {NULL} | {"12"..="zc"} ‚à™ {NULL} | Unknown     |
| Row 0  | NULL                     | 1                | 3                | NULL                   | NULL        |
| Row 1  | "test"                   | 4                | NULL             | "zc"                   | NULL        |
| Row 2  | "cc"                     | NULL             | 1                | "12"                   | NULL        |
| Row 3  | "q"                      | 1                | 1                | "56"                   | "56"        |
+--------+--------------------------+------------------+------------------+------------------------+-------------+
evaluation (internal):
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                                      |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| x      | Nullable(NullableColumn { column: String(StringColumn { data: [104, 105, 116, 101, 115, 116, 99, 99, 113], offsets: [0, 2, 6, 8, 9] }), validity: [0b____1110] })         |
| y      | Nullable(NullableColumn { column: Int32([1, 4, 1, 1]), validity: [0b____1011] })                                                                                          |
| z      | Nullable(NullableColumn { column: Int32([3, 5, 1, 1]), validity: [0b____1101] })                                                                                          |
| u      | Nullable(NullableColumn { column: String(StringColumn { data: [120, 120, 122, 99, 49, 50, 53, 54], offsets: [0, 2, 4, 6, 8] }), validity: [0b____1110] })                 |
| Output | Nullable(NullableColumn { column: String(StringColumn { data: [120, 120, 116, 101, 115, 122, 99, 49, 50, 53, 54], offsets: [0, 2, 7, 9, 11] }), validity: [0b____1000] }) |
+--------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


ast            : locate('bar', 'foobarbar')
raw expr       : locate("bar", "foobarbar")
checked expr   : locate<String, String>("bar", "foobarbar")
optimized expr : 4_u64
output type    : UInt64
output domain  : Unknown
output         : 4


ast            : instr('foobarbar', 'bar')
raw expr       : instr("foobarbar", "bar")
checked expr   : instr<String, String>("foobarbar", "bar")
optimized expr : 4_u64
output type    : UInt64
output domain  : Unknown
output         : 4


ast            : position('bar' IN 'foobarbar')
raw expr       : position("bar", "foobarbar")
checked expr   : position<String, String>("bar", "foobarbar")
optimized expr : 4_u64
output type    : UInt64
output domain  : Unknown
output         : 4


ast            : position('foobarbar' IN 'bar')
raw expr       : position("foobarbar", "bar")
checked expr   : position<String, String>("foobarbar", "bar")
optimized expr : 0_u64
output type    : UInt64
output domain  : Unknown
output         : 0


ast            : locate('bar', 'foobarbar', 5)
raw expr       : locate("bar", "foobarbar", 5_u8)
checked expr   : locate<String, String, UInt64>("bar", "foobarbar", CAST(5_u8 AS UInt64))
optimized expr : 7_u64
output type    : UInt64
output domain  : Unknown
output         : 7


ast            : locate(a, b, c)
raw expr       : locate(ColumnRef(0)::String, ColumnRef(1)::String, ColumnRef(2)::UInt8)
checked expr   : locate<String, String, UInt64>(ColumnRef(0), ColumnRef(1), CAST(ColumnRef(2) AS UInt64))
evaluation:
+--------+---------------+---------------+---------+---------+
|        | a             | b             | c       | Output  |
+--------+---------------+---------------+---------+---------+
| Type   | String        | String        | UInt8   | UInt64  |
| Domain | {"bar"..="q"} | {"56"..="xx"} | {0..=2} | Unknown |
| Row 0  | "bar"         | "foobarbar"   | 1       | 4       |
| Row 1  | "cc"          | "bdccacc"     | 2       | 3       |
| Row 2  | "cc"          | "xx"          | 0       | 0       |
| Row 3  | "q"           | "56"          | 1       | 0       |
+--------+---------------+---------------+---------+---------+
evaluation (internal):
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------+
| Column | Data                                                                                                                                                 |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------+
| a      | String(StringColumn { data: [98, 97, 114, 99, 99, 99, 99, 113], offsets: [0, 3, 5, 7, 8] })                                                          |
| b      | String(StringColumn { data: [102, 111, 111, 98, 97, 114, 98, 97, 114, 98, 100, 99, 99, 97, 99, 99, 120, 120, 53, 54], offsets: [0, 9, 16, 18, 20] }) |
| c      | Int32([1, 2, 0, 1])                                                                                                                                  |
| Output | UInt64([4, 3, 0, 0])                                                                                                                                 |
+--------+------------------------------------------------------------------------------------------------------------------------------------------------------+


